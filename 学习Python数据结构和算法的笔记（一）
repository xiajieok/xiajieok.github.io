<!DOCTYPE html><html lang="zh-CN"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width"><meta name="theme-color" content="#222" media="(prefers-color-scheme: light)"><meta name="theme-color" content="#222" media="(prefers-color-scheme: dark)"><meta name="generator" content="Hexo 6.3.0"><link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png"><link rel="icon" type="image/png" sizes="32x32" href="https://img.econow.cn/2018/1545104669394.png"><link rel="icon" type="image/png" sizes="16x16" href="https://img.econow.cn/2018/1545104669394.png"><link rel="mask-icon" href="/images/logo.svg" color="#222"><link rel="stylesheet" href="/css/main.css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha256-CTSx/A06dm1B063156EVh15m6Y67pAjZZaQc89LLSrU=" crossorigin="anonymous"><script class="next-config" data-name="main" type="application/json">{"hostname":"econow.cn","root":"/","images":"/images","scheme":"Gemini","darkmode":true,"version":"8.18.2","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12},"copycode":{"enable":true,"style":null},"fold":{"enable":false,"height":500},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":false,"lazyload":true,"pangu":true,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"stickytabs":false,"motion":{"enable":false,"async":true,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜索...","empty":"没有找到任何搜索结果：${query}","hits_time":"找到 ${hits} 个搜索结果（用时 ${time} 毫秒）","hits":"找到 ${hits} 个搜索结果"},"path":"/search.xml","localsearch":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false}}</script><script src="/js/config.js"></script><meta name="description" content="前言虽然学习和使用Python已经多年，但是对于算法这一块基本上已经忘的差不多了，正好有机会阅读 用Python解决数据结构和算法 来巩固一下知识点。"><meta property="og:type" content="article"><meta property="og:title" content="学习Python数据结构和算法的笔记（一）"><meta property="og:url" content="https://econow.cn/%E5%AD%A6%E4%B9%A0Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89"><meta property="og:site_name" content="Medivh&#39;s castle"><meta property="og:description" content="前言虽然学习和使用Python已经多年，但是对于算法这一块基本上已经忘的差不多了，正好有机会阅读 用Python解决数据结构和算法 来巩固一下知识点。"><meta property="og:locale" content="zh_CN"><meta property="article:published_time" content="2022-08-05T07:50:47.000Z"><meta property="article:modified_time" content="2023-10-31T02:15:08.707Z"><meta property="article:author" content="medivh"><meta property="article:tag" content="Python"><meta property="article:tag" content="算法"><meta name="twitter:card" content="summary"><link rel="canonical" href="https://econow.cn/%E5%AD%A6%E4%B9%A0Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89"><script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"zh-CN","comments":true,"permalink":"https://econow.cn/%E5%AD%A6%E4%B9%A0Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89","path":"/学习Python数据结构和算法的笔记（一）","title":"学习Python数据结构和算法的笔记（一）"}</script><script class="next-config" data-name="calendar" type="application/json">""</script><title>学习Python数据结构和算法的笔记（一） | Medivh's castle</title><script src="/js/third-party/analytics/baidu-analytics.js"></script><script async src="https://hm.baidu.com/hm.js?21ded952ca9fc25e2b0630494a17ec7f"></script><noscript><link rel="stylesheet" href="/css/noscript.css"></noscript></head><body itemscope itemtype="http://schema.org/WebPage"><div class="headband"></div><main class="main"><div class="column"><header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container"><div class="site-nav-toggle"><div class="toggle" aria-label="切换导航栏" role="button"><span class="toggle-line"></span> <span class="toggle-line"></span> <span class="toggle-line"></span></div></div><div class="site-meta"><a href="/" class="brand" rel="start"><i class="logo-line"></i><p class="site-title">Medivh's castle</p><i class="logo-line"></i></a><p class="site-subtitle" itemprop="description">数据蜘蛛工作室</p></div><div class="site-nav-right"><div class="toggle popup-trigger" aria-label="搜索" role="button"><i class="fa fa-search fa-fw fa-lg"></i></div></div></div><nav class="site-nav"><ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>关于</a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>标签</a></li><li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档</a></li><li class="menu-item menu-item-search"><a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>搜索</a></li></ul></nav><div class="search-pop-overlay"><div class="popup search-popup"><div class="search-header"><span class="search-icon"><i class="fa fa-search"></i></span><div class="search-input-container"><input autocomplete="off" autocapitalize="off" maxlength="80" placeholder="搜索..." spellcheck="false" type="search" class="search-input"></div><span class="popup-btn-close" role="button"><i class="fa fa-times-circle"></i></span></div><div class="search-result-container no-result"><div class="search-result-icon"><i class="fa fa-spinner fa-pulse fa-5x"></i></div></div></div></div></header><aside class="sidebar"><div class="sidebar-inner sidebar-nav-active sidebar-toc-active"><ul class="sidebar-nav"><li class="sidebar-nav-toc">文章目录</li><li class="sidebar-nav-overview">站点概览</li></ul><div class="sidebar-panel-container"><div class="post-toc-wrap sidebar-panel"><div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%89%8D%E8%A8%80"><span class="nav-number">1.</span> <span class="nav-text">前言</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E7%9B%AE%E6%A0%87"><span class="nav-number">1.1.</span> <span class="nav-text">目标</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Python%E5%9F%BA%E7%A1%80"><span class="nav-number">1.2.</span> <span class="nav-text">Python基础</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90"><span class="nav-number">1.2.1.</span> <span class="nav-text">列表解析</span></a><ol class="nav-child"><li class="nav-item nav-level-5"><a class="nav-link" href="#%E8%AF%AD%E6%B3%95"><span class="nav-number">1.2.1.1.</span> <span class="nav-text">语法</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E8%A7%A3%E6%9E%90%E8%A7%84%E5%88%99"><span class="nav-number">1.2.1.2.</span> <span class="nav-text">解析规则</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F"><span class="nav-number">1.2.1.3.</span> <span class="nav-text">工作方式</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E7%BB%83%E4%B9%A0%E2%80%94%E2%80%94%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90"><span class="nav-number">1.2.1.4.</span> <span class="nav-text">练习——列表解析</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E7%BB%83%E4%B9%A0%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0"><span class="nav-number">1.2.1.5.</span> <span class="nav-text">练习——函数</span></a></li></ol></li></ol></li></ol></li></ol></div></div><div class="site-overview-wrap sidebar-panel"><div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person"><p class="site-author-name" itemprop="name">medivh</p><div class="site-description" itemprop="description"></div></div><div class="site-state-wrap animated"><nav class="site-state"><div class="site-state-item site-state-posts"><a href="/archives/"><span class="site-state-item-count">108</span> <span class="site-state-item-name">日志</span></a></div><div class="site-state-item site-state-categories"><a href="/categories/"><span class="site-state-item-count">12</span> <span class="site-state-item-name">分类</span></a></div><div class="site-state-item site-state-tags"><a href="/tags/"><span class="site-state-item-count">48</span> <span class="site-state-item-name">标签</span></a></div></nav></div></div></div></div></aside></div><div class="main-inner post posts-expand"><div class="post-block"><article itemscope itemtype="http://schema.org/Article" class="post-content" lang="zh-CN"><link itemprop="mainEntityOfPage" href="https://econow.cn/%E5%AD%A6%E4%B9%A0Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89"><span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="image" content="/images/avatar.gif"><meta itemprop="name" content="medivh"></span><span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization"><meta itemprop="name" content="Medivh's castle"><meta itemprop="description" content=""></span><span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork"><meta itemprop="name" content="学习Python数据结构和算法的笔记（一） | Medivh's castle"><meta itemprop="description" content=""></span><header class="post-header"><h1 class="post-title" itemprop="name headline">学习Python数据结构和算法的笔记（一）</h1><div class="post-meta-container"><div class="post-meta"><span class="post-meta-item"><span class="post-meta-item-icon"><i class="far fa-calendar"></i> </span><span class="post-meta-item-text">发表于</span> <time title="创建时间：2022-08-05 15:50:47" itemprop="dateCreated datePublished" datetime="2022-08-05T15:50:47+08:00">2022-08-05</time> </span><span class="post-meta-item"><span class="post-meta-item-icon"><i class="far fa-calendar-check"></i> </span><span class="post-meta-item-text">更新于</span> <time title="修改时间：2023-10-31 10:15:08" itemprop="dateModified" datetime="2023-10-31T10:15:08+08:00">2023-10-31</time> </span><span class="post-meta-item"><span class="post-meta-item-icon"><i class="far fa-folder"></i> </span><span class="post-meta-item-text">分类于</span> <span itemprop="about" itemscope itemtype="http://schema.org/Thing"><a href="/categories/%E5%BC%80%E5%8F%91/" itemprop="url" rel="index"><span itemprop="name">开发</span></a> </span></span><span id="/%E5%AD%A6%E4%B9%A0Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89" class="post-meta-item leancloud_visitors" data-flag-title="学习Python数据结构和算法的笔记（一）" title="阅读次数"><span class="post-meta-item-icon"><i class="far fa-eye"></i> </span><span class="post-meta-item-text">阅读次数：</span> <span class="leancloud-visitors-count"></span></span></div></div></header><div class="post-body" itemprop="articleBody"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然学习和使用Python已经多年，但是对于算法这一块基本上已经忘的差不多了，正好有机会阅读 <em>用Python解决数据结构和算法</em> 来巩固一下知识点。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>学习的目标是什么，或者动力是什么？</p><ol><li>了解计算机科学、程序设计和问题解决的基本概念；</li><li>理解抽象和抽象在问题解决过程中的作用；</li><li>理解抽象数据类型的概念以及运用</li></ol><p><strong>算法</strong> 即写出一组解决问题可能出现的任何情况的步步为营的指令。算法通过有线的过程解决问题，是一种解决方案。<br><strong>程序设计</strong> 将算法编码为计算机可执行的表示法或编程语言的过程。</p><h3 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h3><p>为什么要学习算法？<br>通过研究大量不同的算法，可以发展出模式识别机制，当以后出现相似问题时可以更好的解决掉。</p><p>Python是一种支持面向对象的编程范式，意味着Python把数据当做问题解决过程的重点。<strong>类</strong> 去描述数据的外观（状态）和功能（行为）。“类”类似于抽象数据类型，“类”的用户只能看到数据项的状态和行为。数据项在面向对象的范式里被称为<strong>对象</strong>(objects)。对象是类的一个实例。</p><p>接下来的内容讲述了Python的基本数据类型：</p><ul><li>int和float</li><li>list和set</li><li>string</li><li>dict</li></ul><h4 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h4><p>现在尝试解决一些问题。修改代码，是最终列表只包含字母的单一副本<code>[&#39;c&#39;,&#39;a&#39;,&#39;t&#39;,&#39;d&#39;,&#39;o&#39;,&#39;g&#39;,&#39;r&#39;,&#39;b&#39;,&#39;i&#39;]</code>，源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wordlist = [<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;dog&#x27;</span>,<span class="string">&#x27;rabbit&#x27;</span>]</span><br><span class="line">letterlist = [ ]</span><br><span class="line"><span class="keyword">for</span> aword <span class="keyword">in</span> wordlist:</span><br><span class="line">    <span class="keyword">for</span> aletter <span class="keyword">in</span> aword:</span><br><span class="line">        letterlist.append(aletter)</span><br><span class="line"><span class="built_in">print</span>(letterlist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">[<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;t&#x27;</span>]</span><br></pre></td></tr></table></figure><p>修改后的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wordlist = [<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;dog&#x27;</span>,<span class="string">&#x27;rabbit&#x27;</span>]</span><br><span class="line">letterlist = [ ]</span><br><span class="line"><span class="keyword">for</span> aword <span class="keyword">in</span> wordlist:</span><br><span class="line">    <span class="keyword">for</span> aletter <span class="keyword">in</span> aword:</span><br><span class="line">        letterlist.append(aletter)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(letterlist)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;t&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实，作者的本意可能是让使用列表解析的方式来达到目的，但是我们有更好的方法，使用<code>set()</code>来去重后再转为<code>list()</code>类型就可以了。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>在列表中，存在一种替代方法使用迭代和选择结构创建列表，被称为<strong>列表解析</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newlist = [Expression <span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">list</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明如下：</p><ul><li>newlist 新生成的列表名称</li><li>Expression 表达式，用于计算新列表的元素</li><li>var 变量，值为后面列表的每个元素值</li><li>list 用于生成新列表的原列表</li></ul><p>带有条件的解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newlist = [Expression <span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">list</span> <span class="keyword">if</span> condition]</span><br></pre></td></tr></table></figure><p>condition 条件表达式，用于筛选条件。</p><h5 id="解析规则"><a href="#解析规则" class="headerlink" title="解析规则"></a>解析规则</h5><p>Python中内置类型的解析规则：</p><ol><li>如果使用中括号，表示为列表解析；</li><li>如果使用大括号，表示为集合解析</li><li>如果使用大括号且元素为k:v形式，表示为字典解析。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合解析</span></span><br><span class="line">&gt;&gt;&gt; &#123; i*2 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;abcd&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;dd&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典解析</span></span><br><span class="line">&gt;&gt;&gt; &#123; k:v <span class="keyword">for</span> k,v <span class="keyword">in</span> zip((&quot;one&quot;,&quot;two&quot;,&quot;three&quot;),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) &#125;</span><br><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: 1, <span class="string">&#x27;two&#x27;</span>: 2, <span class="string">&#x27;three&#x27;</span>: 3&#125;</span><br><span class="line">&gt;&gt;&gt; &#123; k: k*2 <span class="keyword">for</span> k <span class="keyword">in</span> <span class="string">&quot;abcd&quot;</span> &#125;</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;dd&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h5><p>首先用迭代工具for对容器中的元素进行跌打，每个元素都经过筛选，对符合条件的元素执行外部表达式，每个外部表达式都生成一个新的元素，然后昨晚新列表的一个元素，从而推导出一个新的列表。</p><p>列表解析可以让你创建基于某些处理或选择条件的列表。比如创建一个小于10的整数的平方的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sqlist = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    sqlist.append(i*i)</span><br><span class="line"><span class="built_in">print</span>(sqlist)</span><br><span class="line"></span><br><span class="line">sqlist = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(sqlist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>上面的代码中，第一段是先循环出一个整数，计算后再塞入list。第二段代码其实也是差不多，先取出一个整数，计算平方后再塞入新建的列表中。列表解析还可以使用选择语句，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sqlist = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> i%<span class="number">2</span> !=<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(sqlist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">49</span>, <span class="number">81</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码中取整数后判断是否为奇数，如果是则进行平方计算并塞入新的列表中。</p><h5 id="练习——列表解析"><a href="#练习——列表解析" class="headerlink" title="练习——列表解析"></a>练习——列表解析</h5><p>删除重复元素：<code>[&#39;c&#39;, &#39;a&#39;, &#39;t&#39;, &#39;d&#39;, &#39;o&#39;, &#39;g&#39;, &#39;r&#39;, &#39;a&#39;, &#39;b&#39;, &#39;b&#39;, &#39;i&#39;, &#39;t&#39;]</code></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常规方案</span></span><br><span class="line">s = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;t&#x27;</span>]</span><br><span class="line">sqlist = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> sqlist:</span><br><span class="line">        sqlist.append(i)</span><br><span class="line"><span class="built_in">print</span>(sqlist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表解析</span></span><br><span class="line">animal = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;t&#x27;</span>]</span><br><span class="line">newlist = <span class="built_in">list</span>()</span><br><span class="line">sqlist = [newlist.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> animal <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> newlist]</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里和之前不一样的是，步骤如下：</p><ol><li>循环取出一个元素；</li><li>判断元素是否属于定义的newlist;</li><li>如果不属于则插入到newlist;</li><li>输出newlist.</li></ol><h5 id="练习——函数"><a href="#练习——函数" class="headerlink" title="练习——函数"></a>练习——函数</h5><p>编写一个函数，该函数生成一个27个字符长度的字符串，从26个字母和空格中随机选择一个字符。编写另一个函数，比较随机生成的字符串和目标字符串。第三个函数将反复调用生成和比较函数，那么如果所有目标字母都在随机字符串中出现了，那么就完成了。如果字母没有全部出现，那么会生成一个全新的字符串。</p><ol><li>第一个函数生成随机字符，从26个字母和空格里；</li><li>第二个函数来比较随机生成的字符和目标字符；</li><li>第三个函数返回目前为止能匹配上的字符串以及尝试次数。</li></ol><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现匹配出所有字符，并非对应所有字符</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_chars</span>():</span><br><span class="line">    <span class="comment"># 获取26个字符，使用ASCII码表来定位，并生成列表</span></span><br><span class="line">    chars = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>, <span class="number">123</span>)]</span><br><span class="line">    <span class="comment"># 添加空格至列表</span></span><br><span class="line">    chars.append(<span class="built_in">chr</span>(<span class="number">32</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choice(chars) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diff_chars</span>(<span class="params">chars_list, random_chars</span>):</span><br><span class="line">    new_chars_list = <span class="built_in">list</span>()</span><br><span class="line">    [new_chars_list.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> chars_list <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> new_chars_list]</span><br><span class="line">    random_chars_list = <span class="built_in">list</span>()</span><br><span class="line">    [random_chars_list.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> random_chars <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> random_chars_list]</span><br><span class="line"></span><br><span class="line">    successful_chars = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> new_chars_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> random_chars_list:</span><br><span class="line">            successful_chars.append(i)</span><br><span class="line">    score = <span class="string">&#x27;%.2f&#x27;</span> % (<span class="built_in">len</span>(successful_chars) / <span class="built_in">len</span>(new_chars_list) * <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_result</span>():</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    chars = <span class="string">&#x27;methinks it is a weasel&#x27;</span></span><br><span class="line">    chars_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> chars]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        random_chars = get_chars()</span><br><span class="line">        res = <span class="built_in">float</span>(diff_chars(chars_list, random_chars))</span><br><span class="line">        <span class="comment"># 如果得分为100或次数等于10000则退出</span></span><br><span class="line">        <span class="keyword">if</span> math.isclose(res, <span class="number">100.0</span>, abs_tol=<span class="number">0</span>) <span class="keyword">or</span> num &gt;= <span class="number">10000</span>:</span><br><span class="line">            <span class="built_in">print</span>(num, random_chars)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_result()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"></span><br><span class="line"><span class="number">323</span>  wc uhtveaimrzvmbrsbmcnlnky</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><footer class="post-footer"><div class="reward-container"><div>喜欢就点个赞吧！</div><button>赞赏</button><div class="post-reward"><div><img src="/images/wechatpay.jpg" alt="medivh 微信"> <span>微信</span></div><div><img src="/images/alipay.jpg" alt="medivh 支付宝"> <span>支付宝</span></div></div></div><div class="post-copyright"><ul><li class="post-copyright-author"><strong>本文作者： </strong>medivh</li><li class="post-copyright-link"><strong>本文链接：</strong> <a href="https://econow.cn/%E5%AD%A6%E4%B9%A0Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89" title="学习Python数据结构和算法的笔记（一）">https://econow.cn/学习Python数据结构和算法的笔记（一）</a></li><li class="post-copyright-license"><strong>版权声明： </strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="noopener" target="_blank"><i class="fab fa-fw fa-creative-commons"></i>BY-NC-SA</a> 许可协议。转载请注明出处！</li></ul></div><div class="post-tags"><a href="/tags/Python/" rel="tag"><i class="fa fa-tag"></i> Python</a> <a href="/tags/%E7%AE%97%E6%B3%95/" rel="tag"><i class="fa fa-tag"></i> 算法</a></div><div class="post-nav"><div class="post-nav-item"><a href="/MarkDown%E5%B8%B8%E8%A7%81%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E8%A7%A3%E6%9E%90" rel="prev" title="MarkDown常见语法错误解析"><i class="fa fa-angle-left"></i> MarkDown常见语法错误解析</a></div><div class="post-nav-item"><a href="/%E8%AF%A6%E8%A7%A3Kubernetes%E4%B8%ADPod%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4%E8%BF%87%E7%A8%8B" rel="next" title="详解Kubernetes中Pod的创建和删除过程">详解Kubernetes中Pod的创建和删除过程 <i class="fa fa-angle-right"></i></a></div></div></footer></article></div></div></main><footer class="footer"><div class="footer-inner"><div class="beian"><a href="https://beian.miit.gov.cn/" rel="noopener" target="_blank">京ICP备17063827号-2</a></div><div class="copyright">&copy; 2017 – <span itemprop="copyrightYear">2025</span> <span class="with-love"><i class="fa fa-heart"></i> </span><span class="author" itemprop="copyrightHolder">medivh</span></div></div></footer><div class="back-to-top" role="button" aria-label="返回顶部"><i class="fa fa-arrow-up fa-lg"></i> <span>0%</span></div><div class="reading-progress-bar"></div><noscript><div class="noscript-warning">Theme NexT works best with JavaScript enabled</div></noscript><script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/lozad.js/1.16.0/lozad.min.js" integrity="sha256-mOFREFhqmHeQbXpK2lp4nA3qooVgACfh88fpJftLBbc=" crossorigin="anonymous"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/pangu/4.0.7/pangu.min.js" integrity="sha256-j+yj56cdEY2CwkVtGyz18fNybFGpMGJ8JxG3GSyO2+I=" crossorigin="anonymous"></script><script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/next-boot.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-generator-searchdb/1.4.1/search.js" integrity="sha256-1kfA5uHPf65M5cphT2dvymhkuyHPQp5A53EGZOnOLmc=" crossorigin="anonymous"></script><script src="/js/third-party/search/local-search.js"></script><script class="next-config" data-name="leancloud_visitors" type="application/json">{"enable":true,"app_id":"g1GwilqmVAUne2tDEDncEChG-gzGzoHsz","app_key":"YB2e5dSKMmMYYCtaSzxp9fdS","server_url":"https://api.econow.cn","security":false}</script><script src="/js/third-party/statistics/lean-analytics.js"></script></body></html>