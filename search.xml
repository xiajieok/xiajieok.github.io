<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Hexo Next 主题配置]]></title>
      <url>%2F2017%2F04%2F28%2FHexo%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%2F</url>
      <content type="text"><![CDATA[NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia,Swiftype和Algolia都只有一段时间的试用期，可以采用Hexo提供的Local Search,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。 配置搜索安装 hexo-generator-search在站点的根目录下执行以下命令：1234#安装 hexo-generator-searchdb$ npm install hexo-generator-search --save$ npm install hexo-generator-searchdb --save 启用搜索编辑 站点配置文件，新增以下内容到任意位置：12345search: path: search.xml field: post format: html limit: 10000 验证搜索 修改背景色123456vim themes/next/source/css/_custom/custom.styl//Custom styles.body &#123; background:rgb(250, 235, 215); #可以设置背景色或者背景图片&#125; 开启动画效果修改_config.yml,true为开启，false为关闭。但是有个问题，three_waves这个动画效果开启后，风扇就开始狂转，建议选择其它效果。 开启访问量统计申请帐号注册帐号 创建应用 创建class 获取key 修改配置文件_confi.yml1234leancloud_visitors: enable: true app_id: B1L35FebIXXX3MloNCxrCS-gzGzoHsz app_key: iQH7DjsXXXMB58gpevWMC 重新加载后就出来了，但是只能在外网访问的时候才会增加。 按照Next官方手册给的LeanCloud教程弄完以后，次数格式出现了xx:xx:xx的形式，当时的内心是崩溃的。Why?经多方的研究和询问以后发现是因为Next主题已经集成了LeanCloud，而我们只需要配置主题_config.yml即可，但是，坑爹的又出现了，把教程里面的配置过的东西删除后，次数就完全不显示了，再次经过多方的研究，解决了这个问题，所以在此记录。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python+pycurl监控网站]]></title>
      <url>%2F2017%2F04%2F26%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85pycurl%2F</url>
      <content type="text"><![CDATA[前言打算写个监控网站状态的小脚本，用到pycurl，但是提示找不到curl-config，那就手动安装吧。Pycurl包是一个libcurl的Python接口，它是由C语言编写的。与urllib相比，pycurl的速度要快很多。 Libcurl 是一个支持FTP，FTPS，HTTP，HTTPS，GOPHER，TELNET，DICT，FILE 和 LDAP的客户端URL传输库。libcurl也支持HTTPS认证，HTTP、POST、HTTP PUT、FTP上传，代理，Cookies，基本身份验证，FTP文件断点继传，HTTP代理通道等等。 安装1234567cd srcsudo wget http://curl.haxx.se/download/curl-7.24.0.tar.gztar -zxvf curl-7.24.0.tar.gzcd curl-7.24.0./configuremake make install 检查curl-config是否存在，如果存在则继续安装，pip3 或者下载安装12345cd ..sudo wget http://pycurl.sourceforge.net/download/pycurl-7.19.0.tar.gztar -zxvf pycurl-7.19.0.tar.gzcd pycurl-7.19.0python3 setup.py install --curl-config=/usr/local/bin/curl-config 基本用法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051c = pycurl.Curl() #创建一个curl对象 c.setopt(pycurl.CONNECTTIMEOUT, 5) #连接的等待时间，设置为0则不等待 c.setopt(pycurl.TIMEOUT, 5) #请求超时时间 c.setopt(pycurl.NOPROGRESS, 0) #是否屏蔽下载进度条，非0则屏蔽 c.setopt(pycurl.MAXREDIRS, 5) #指定HTTP重定向的最大数 c.setopt(pycurl.FORBID_REUSE, 1) #完成交互后强制断开连接，不重用 c.setopt(pycurl.FRESH_CONNECT,1) #强制获取新的连接，即替代缓存中的连接 c.setopt(pycurl.DNS_CACHE_TIMEOUT,60) #设置保存DNS信息的时间，默认为120秒 c.setopt(pycurl.URL,"http://www.baidu.com") #指定请求的URL c.setopt(pycurl.USERAGENT,"Mozilla/5.2 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50324)") #配置请求HTTP头的User-Agentc.setopt(pycurl.HEADERFUNCTION, getheader) #将返回的HTTP HEADER定向到回调函数getheaderc.setopt(pycurl.WRITEFUNCTION, getbody) #将返回的内容定向到回调函数getbodyc.setopt(pycurl.WRITEHEADER, fileobj) #将返回的HTTP HEADER定向到fileobj文件对象c.setopt(pycurl.WRITEDATA, fileobj) #将返回的HTML内容定向到fileobj文件对象c.getinfo(pycurl.HTTP_CODE) #返回的HTTP状态码c.getinfo(pycurl.TOTAL_TIME) #传输结束所消耗的总时间c.getinfo(pycurl.NAMELOOKUP_TIME) #DNS解析所消耗的时间c.getinfo(pycurl.CONNECT_TIME) #建立连接所消耗的时间c.getinfo(pycurl.PRETRANSFER_TIME) #从建立连接到准备传输所消耗的时间c.getinfo(pycurl.STARTTRANSFER_TIME) #从建立连接到传输开始消耗的时间c.getinfo(pycurl.REDIRECT_TIME) #重定向所消耗的时间c.getinfo(pycurl.SIZE_UPLOAD) #上传数据包大小c.getinfo(pycurl.SIZE_DOWNLOAD) #下载数据包大小 c.getinfo(pycurl.SPEED_DOWNLOAD) #平均下载速度c.getinfo(pycurl.SPEED_UPLOAD) #平均上传速度c.getinfo(pycurl.HEADER_SIZE) #HTTP头部大小 代码示例12345678910111213141516171819import pycurlimport iourl='www.baidu.com'c=pycurl.Curl()c.setopt(c.URL, url)b = io.StringIO()c.setopt(c.WRITEFUNCTION, b.write)#c.setopt(c.FOLLOWLOCATION, 1)#c.setopt(c.HEADER, True) c.perform() print(b.getvalue()) b.close()c.close() 代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667import pycurlimport ioimport wechat_smsimport timedef check_status(url): ''' 检查网站状态 :param url: :return: 异常信息,正常则不返回 ''' c = pycurl.Curl() #pycurl 实例 c.setopt(pycurl.URL, url) c.setopt(pycurl.TIMEOUT,10) #超时时间 b = io.BytesIO() c.setopt(pycurl.WRITEFUNCTION, b.write) c.perform() code = c.getinfo(pycurl.HTTP_CODE) #状态码 total_time = '%.2f'%c.getinfo(pycurl.TOTAL_TIME) #总时间 dns = '%.2f'%c.getinfo(pycurl.NAMELOOKUP_TIME) #DNS解析消耗 connet_time = '%.2f'%c.getinfo(pycurl.CONNECT_TIME) #建立连接时间 PRETRANSFER_TIME = '%.2f'%c.getinfo(pycurl.PRETRANSFER_TIME) #建立连接到准备传输数据时间 STARTTRANSFER_TIME = '%.2f'%c.getinfo(pycurl.STARTTRANSFER_TIME) #建立连接到传输开始消耗的时间 download = c.getinfo(pycurl.SPEED_DOWNLOAD) #平均下载速度 info = ('HTTP Code: %s\nTotal time: %s ms\nDNS lookup time: %s ms\nCONNECT_TIME: %s ms\nPRETRANSFER_TIME: %s ms\nSTARTTRANSFER_TIME: %s ms\nDownload Speed: %s byte/s' % (code, total_time, dns,connet_time,PRETRANSFER_TIME,STARTTRANSFER_TIME,download)) print(code) if code &gt; 400 and connet_time &gt; 10: #如果状态码大于400,或者消耗时间大于10秒,说明网站有问题,发送错误信息;否则不返回 return info else: return Truedef send_sms(url): ''' 发送信息 :param url: :return: ''' msm = check_status(url) project = '网站状态' #如果网站状态返回为True,则跳出,否则返回具体信息 while msm is True: print(msm) break else: print(msm) WeChat.sendMessage('medivh', project, msm)if __name__ == '__main__': WeChat = wechat_sms.WeChat('https://qyapi.weixin.qq.com/cgi-bin') #自定义网站列表,循环执行对网站的检测 url_list = ['http://wechat.xxx.com','http://www.xxx.com','http://xxx.com'] while True: for i in url_list: msm = send_sms(i) # 30秒检查一次 time.sleep(30)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[树莓派获取天气预报+语音播报]]></title>
      <url>%2F2017%2F04%2F25%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5-%E8%AF%AD%E9%9F%B3%E6%92%AD%E6%8A%A5%2F</url>
      <content type="text"><![CDATA[很久以前就像弄个天气预报之类的小东西啦，现在就来玩一下。参考网上的一个例子，抓取墨迹天气的内容，将天气情况转换成mp3文件，使用播放器播放，另外再发送到微信企业号上。 获取天气墨迹天气安装模块：bs4，requests 12sudo apt-get install requestssudo apt-get install bs4 代码示例12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import requestsimport subprocessfrom bs4 import BeautifulSoupheaders = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit' '/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safar' 'i/537.36',&#125;def weather(): res2 = requests.get('http://tianqi.moji.com/', headers=headers) soup = BeautifulSoup(res2.text, "html.parser") # 获取温度, temp = soup.find('ul', attrs=&#123;'class': 'days clearfix'&#125;).find_all('li')[2].getText() # 格式化温度,最高和最低 max_temp = temp.split('/')[0] min_temp = temp.split('/')[1] # 获取天气情况 weather = soup.find('ul', attrs=&#123;'class': 'days clearfix'&#125;).li.find_next_sibling().getText().strip() # 获取风向 wind = soup.find('ul', attrs=&#123;'class': 'days clearfix'&#125;).em.getText() # 获取风的登记 wind_level = soup.find('ul', attrs=&#123;'class': 'days clearfix'&#125;).b.getText() info = ('今天天气%s,最高%s,最低%s,%s%s' % (weather, max_temp, min_temp, wind, wind_level)) return infodef baidu(text): ''' 使用百度语音API,将获取的天气信息进行语音转换,并生成mp3文件 :param text: :return: ''' url = 'http://tts.baidu.com/text2audio?idx=1&amp;tex=&#123;0&#125;&amp;cuid=baidu_speech_' \ 'demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=4&amp;per=4&amp;vol=5&amp;pit=5'.format(text) res = requests.get(url, headers=headers) with open('./music/weather.mp3', 'wb') as f: f.write(res.content)if __name__ == '__main__': info = weather() baidu(info) p = subprocess.Popen('ls ./music/weather.mp3', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) for line in p.stdout.readlines(): print(line)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[树莓派编译安装Python3.5]]></title>
      <url>%2F2017%2F04%2F25%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Python3-5%2F</url>
      <content type="text"><![CDATA[刚写了一个天气预报的脚本，想部署在服务器上，但是运行的时候报错，说找不到requests库，奇怪的是装上了也报错。后来发现树莓派自带的是3.2，版本有点老可能会有点不兼容吧。那就装个Python3.5吧！ 环境依赖sudo apt-get install libssl-devsudo apt-get install openssl 123456sudo wget https://www.python.org/ftp/python/3.5.3/Python-3.5.3.tar.xztar -xvf Python-3.5.3.tar.xzcd Python-3.5.3./configure --prefix=/usr/local/python3.5makemake altinstall 进入/usr/local/python3.5 检查是否完整建立软链 12sudo ln -s /usr/local/python3.5/bin/python3.5 /usr/bin/python3sudo ln -s /usr/local/python3.5/bin/pip3 /usr/bin/pip3 安装完成！！！ 错误整理1、 提示Ignoring ensurepip failure: pip 8.1.1 requires SSL/TLS错误 是因为没有安装openssl-devel解决： 12sudo apt-get install libssl-devsudo apt-get install openss 2、libssl-dev无法安装 1234The following packages have unmet dependencies: libssl-dev : Depends: libssl1.0.0 (= 1.0.1-4ubuntu5) but 1.0.1-4ubuntu5.3 is to be installed Recommends: libssl-doc but it is not going to be installedE: Unable to correct problems, you have held broken packages. 原因： 已安装的libssl1.0.0版本太高, 无法支持解决： 参考 这里]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[从万网邮箱搬家到腾讯]]></title>
      <url>%2F2017%2F04%2F24%2F%E4%BB%8E%E4%B8%87%E7%BD%91%E9%82%AE%E7%AE%B1%E6%90%AC%E5%AE%B6%E5%88%B0%E8%85%BE%E8%AE%AF%2F</url>
      <content type="text"><![CDATA[有一天收到邮件说万网邮箱到期啦，续不续费呢，这是个问题。最终老板决定不续费，毕竟是一笔不小的开支。但还想留着，就搬到腾讯邮箱吧。 注册腾讯企业邮箱（免费版）登录官网点击注册选择版本根据提示输入信息 域名解析（阿里云）输入域名后，进入域名管理后台进行解析，下列所有记录都需要添加 12345678记录类型 主机记录 解析线路(运营商) 记录值 MX优先级 TTL 状态 操作CNAME imap 默认 imap.exmail.qq.com -- 10分钟 修改|暂停|删除|备注CNAME mail 默认 exmail.qq.com -- 10分钟 修改|暂停|删除|备注CNAME pop 默认 pop.exmail.qq.com -- 10分钟 修改|暂停|删除|备注CNAME smtp 默认 smtp.exmail.qq.com -- 10分钟 修改|暂停|删除|备注TXT @ 默认 v=spf1 include:spf.mail.qq.com ~all -- 10分钟 修改|暂停|删除|备注MX @ 默认 mxbiz1.qq.com. 5 10分钟 修改|暂停|删除|备注MX @ 默认 mxbiz2.qq.com. 10 10分钟 修改|暂停|删除|备注 搬家具体请参考官网 导入用户，使用模板，导入帐号和密码（初始密码，随便设置，以后客户登录时还会提示修改） 点击工具箱-&gt;邮箱搬家-&gt;输入相关信息即可 用户登录官网 完成邮箱搬家！！！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[全自动部署Hexo 到github]]></title>
      <url>%2F2017%2F04%2F21%2F%E5%85%A8%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo-%E5%88%B0github%2F</url>
      <content type="text"><![CDATA[有一天把hexo配置好了，但是每次更新后还有手动部署太麻烦。正好有个pm2的工具，完全可以代替我们做这些事。安装 pm21npm install -g pm2 在博客source目录新建start.js1234567var process = require('child_process');process.exec(' hexo g -d', function (error, stdout, stderr) &#123; if (error !== null) &#123; console.log('exec error: ' + error); &#125; &#125;); 新建watch.js123456789&#123; "apps" : [&#123; "name" : "blog", "script" : "./start.js", "exec_interpreter": "node", "exec_mode" : "fork_mode", "watch" : "_posts" &#125;]&#125; 使用pm2命令实现监控文件变动自动提交1pm2 start watch.json pm2常用命令1234pm listpm logspm start watch.jsonpm show &lt;id|name&gt; 这样就会发现Hexo已经被自动部署到github啦，而且时刻保持最新版]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F04%2F21%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo 轻博客搭建]]></title>
      <url>%2F2017%2F04%2F21%2FHexo-%E8%BD%BB%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
      <content type="text"><![CDATA[初识HexoHexo是一个快速的、简单的、功能强大的博客框架。你可以通过Markdown语言写文章，然后hexo帮你生成一个带有漂亮主题的静态页面。最近入手了一个树莓派，所以有事没事就想着折腾它，后来无意中看到了hexo的博客，真漂亮！就试着在派上部署一下环境试试。 安装依赖环境hexo依赖于nodejs，因此记得先装一下nodejs。有些平台上就编译一下吧，比如在树莓派上就得好几个小时，那就在那编译着吧。。。编译安装nodejs 1234567wget http://nodejs.org/dist/latest-v6.x/node-v6.9.1.tar.gz tar -zxvf node-v6.9.1.tar.gz cd node-v6.9.1 ./configure make make install node -v 安装完成后安装hexoNode, npm和Git都安装成功, 开始安装hexo 12npm install hexo -g#-g表示全局安装, npm默认为当前项目安装 安装组件 12npm install hexo-deployer-git --save#hexo 使用git 检查版本123456789101112Jack:~ jack$ hexo versionhexo-cli: 1.0.2os: Darwin 15.4.0 darwin x64http_parser: 2.6.2node: 5.10.1v8: 4.6.85.31uv: 1.8.0zlib: 1.2.8ares: 1.10.1-DEVicu: 56.1modules: 47openssl: 1.0.2g Hexo初始化:12hexo init hexo #执行init命令初始化到你指定的hexo目录 初始化后目录结构123456-rw-r--r-- 1 jack staff 1483 4 21 10:19 _config.ymldrwxr-xr-x 288 jack staff 9792 4 21 10:24 node_modules/-rw-r--r-- 1 jack staff 443 4 21 10:19 package.jsondrwxr-xr-x 5 jack staff 170 4 21 10:19 scaffolds/drwxr-xr-x 3 jack staff 102 4 21 10:19 source/drwxr-xr-x 3 jack staff 102 4 21 10:19 themes/ 123npm install #install before start blogginghexo generate #自动根据当前目录下文件,生成静态网页hexo server #运行本地服务 浏览器输入http://localhost:4000就可以看到效果。 目录结构123456789101112.├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里| ├── _drafts #草稿| └── _posts #文章├── themes #主题├── _config.yml #全局配置文件└── package.json 配置修改_config.yml 12345678910111213title: Medivhsubtitle: Medivh 的 blogdescription: my blog is Hexoauthor: Medivhlanguage: zh-CNtimezone: Asia/Shanghai# URLurl: http://xj.github.io#githubdeploy: type: git repo: https://github.com/xiajieok/xj.github.io.git branch: master 配置github 配置域名repo-&gt;settings-&gt; 检查是否和配置文件一致 部署1hexo depoly 访问如果出现404，检查配置文件和域名是否一致。http://xiajieok.github.io 常见错误如果出现ERROR Deployer not found: git1安装npm install hexo-deployer-git --save – end]]></content>
    </entry>

    
  
  
</search>
