<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: light)">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: dark)"><meta name="generator" content="Hexo 6.3.0">

  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="https://img.econow.cn/2018/1545104669394.png">
  <link rel="icon" type="image/png" sizes="16x16" href="https://img.econow.cn/2018/1545104669394.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha256-CTSx/A06dm1B063156EVh15m6Y67pAjZZaQc89LLSrU=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" integrity="sha256-PR7ttpcvz8qrF57fur/yAx1qXMFJeJFiA6pSzWi0OIE=" crossorigin="anonymous">

<script class="next-config" data-name="main" type="application/json">{"hostname":"econow.cn","root":"/","images":"/images","scheme":"Gemini","darkmode":true,"version":"8.18.2","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12},"copycode":{"enable":true,"style":null},"fold":{"enable":false,"height":500},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"stickytabs":false,"motion":{"enable":true,"async":false,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜索...","empty":"没有找到任何搜索结果：${query}","hits_time":"找到 ${hits} 个搜索结果（用时 ${time} 毫秒）","hits":"找到 ${hits} 个搜索结果"}}</script><script src="/js/config.js"></script>

    <meta name="description" content="常见知识点自省自省，也叫反射，是运行时判断一个对象类型的能力。用来检查某些事务以确定它是什么、知道什么和它能做什么。相关的方法如下:  hasattr(object,name)检查对象是否有name属性，Boolean   123class Hi(object):    a &#x3D; 0hasattr(Hi,&amp;#x27;a&amp;#x27;)  getattr(object,name,default)获取对象">
<meta property="og:type" content="article">
<meta property="og:title" content="Python知识点总结">
<meta property="og:url" content="https://econow.cn/Python%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93">
<meta property="og:site_name" content="Medivh&#39;s castle">
<meta property="og:description" content="常见知识点自省自省，也叫反射，是运行时判断一个对象类型的能力。用来检查某些事务以确定它是什么、知道什么和它能做什么。相关的方法如下:  hasattr(object,name)检查对象是否有name属性，Boolean   123class Hi(object):    a &#x3D; 0hasattr(Hi,&amp;#x27;a&amp;#x27;)  getattr(object,name,default)获取对象">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://img.econow.cn/medivh/1660724977831.png">
<meta property="article:published_time" content="2022-08-17T07:25:24.000Z">
<meta property="article:modified_time" content="2023-10-31T02:15:08.692Z">
<meta property="article:author" content="medivh">
<meta property="article:tag" content="Python">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://img.econow.cn/medivh/1660724977831.png">


<link rel="canonical" href="https://econow.cn/Python%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93">



<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"zh-CN","comments":true,"permalink":"https://econow.cn/Python%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93","path":"/Python知识点总结","title":"Python知识点总结"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>Python知识点总结 | Medivh's castle</title>
  

  <script src="/js/third-party/analytics/baidu-analytics.js"></script>
  <script async src="https://hm.baidu.com/hm.js?21ded952ca9fc25e2b0630494a17ec7f"></script>







  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">Medivh's castle</p>
      <i class="logo-line"></i>
    </a>
      <p class="site-subtitle" itemprop="description">数据蜘蛛工作室</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="搜索" role="button">
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>关于</a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>标签</a></li><li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档</a></li><li class="menu-item menu-item-search"><a href="/search" rel="section"><i class="fa fa-search fa-fw"></i>搜索</a></li>
  </ul>
</nav>




</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9"><span class="nav-number">1.</span> <span class="nav-text">常见知识点</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E8%87%AA%E7%9C%81"><span class="nav-number">1.1.</span> <span class="nav-text">自省</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#args%E5%92%8C-kwargs"><span class="nav-number">1.2.</span> <span class="nav-text">*args和**kwargs</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%BC%82%E5%B8%B8%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B"><span class="nav-number">1.3.</span> <span class="nav-text">异常代码示例</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#GIL"><span class="nav-number">1.4.</span> <span class="nav-text">GIL</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8"><span class="nav-number">1.5.</span> <span class="nav-text">迭代器和生成器</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E8%BF%AD%E4%BB%A3%E5%99%A8"><span class="nav-number">1.5.1.</span> <span class="nav-text">迭代器</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E7%94%9F%E6%88%90%E5%99%A8"><span class="nav-number">1.5.2.</span> <span class="nav-text">生成器</span></a></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E9%97%AD%E5%8C%85"><span class="nav-number">1.6.</span> <span class="nav-text">闭包</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#classmethod%E5%92%8Cstaticmethod%E5%8C%BA%E5%88%AB"><span class="nav-number">1.7.</span> <span class="nav-text">classmethod和staticmethod区别</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#new-%E5%92%8C-init-%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="nav-number">1.8.</span> <span class="nav-text">__new__和__init__的区别</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#new"><span class="nav-number">1.8.1.</span> <span class="nav-text">new</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#call"><span class="nav-number">1.8.2.</span> <span class="nav-text">call</span></a></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D"><span class="nav-number">1.9.</span> <span class="nav-text">深拷贝和浅拷贝</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F"><span class="nav-number">1.10.</span> <span class="nav-text">单例模式</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F"><span class="nav-number">1.10.1.</span> <span class="nav-text">实现方式</span></a></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Python%E8%A7%A3%E9%87%8A%E5%99%A8"><span class="nav-number">1.11.</span> <span class="nav-text">Python解释器</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Python%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84"><span class="nav-number">1.12.</span> <span class="nav-text">Python是如何实现内存管理的</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#lambda-%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8"><span class="nav-number">1.13.</span> <span class="nav-text">lambda 函数的使用</span></a></li></ol></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">medivh</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">95</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
        <span class="site-state-item-count">12</span>
        <span class="site-state-item-name">分类</span>
      </div>
      <div class="site-state-item site-state-tags">
        <span class="site-state-item-count">48</span>
        <span class="site-state-item-name">标签</span>
      </div>
  </nav>
</div>

        </div>
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="https://econow.cn/Python%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="medivh">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Medivh's castle">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="Python知识点总结 | Medivh's castle">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          Python知识点总结
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">发表于</span>

      <time title="创建时间：2022-08-17 15:25:24" itemprop="dateCreated datePublished" datetime="2022-08-17T15:25:24+08:00">2022-08-17</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar-check"></i>
      </span>
      <span class="post-meta-item-text">更新于</span>
      <time title="修改时间：2023-10-31 10:15:08" itemprop="dateModified" datetime="2023-10-31T10:15:08+08:00">2023-10-31</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-folder"></i>
      </span>
      <span class="post-meta-item-text">分类于</span>
        <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
          <a href="/categories/%E5%BC%80%E5%8F%91/" itemprop="url" rel="index"><span itemprop="name">开发</span></a>
        </span>
    </span>

  
    <span id="/Python%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93" class="post-meta-item leancloud_visitors" data-flag-title="Python知识点总结" title="阅读次数">
      <span class="post-meta-item-icon">
        <i class="far fa-eye"></i>
      </span>
      <span class="post-meta-item-text">阅读次数：</span>
      <span class="leancloud-visitors-count"></span>
    </span>
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody"><h2 id="常见知识点"><a href="#常见知识点" class="headerlink" title="常见知识点"></a>常见知识点</h2><h3 id="自省"><a href="#自省" class="headerlink" title="自省"></a>自省</h3><p>自省，也叫反射，是运行时判断一个对象类型的能力。用来检查某些事务以确定它是什么、知道什么和它能做什么。相关的方法如下:</p>
<ul>
<li><p>hasattr(object,name)检查对象是否有name属性，Boolean</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hi</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line"><span class="built_in">hasattr</span>(Hi,<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>getattr(object,name,default)获取对象的name属性</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hi</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line"><span class="built_in">getattr</span>(Hi,<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>setattr(object,name,default) 给对象设置name属性</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;class A(object):</span><br><span class="line">...     bar = 1</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; a = A()</span><br><span class="line">&gt;&gt;&gt; getattr(a, <span class="string">&#x27;bar&#x27;</span>)          <span class="comment"># 获取属性 bar 值</span></span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; setattr(a, <span class="string">&#x27;bar&#x27;</span>, 5)       <span class="comment"># 设置属性 bar 值</span></span><br><span class="line">&gt;&gt;&gt; a.bar</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
</li>
<li><p>delattr(object，name)给对象删除name属性</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Coordinate</span>:</span><br><span class="line">z = <span class="number">0</span></span><br><span class="line">point1 = Coordinate()  </span><br><span class="line"><span class="built_in">delattr</span>(Coordinate, <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;z = &#x27;</span>,point1.z)</span><br><span class="line"></span><br><span class="line">AttributeError: <span class="string">&#x27;Coordinate&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;z&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>dir([object]) 获取对象大部分的属性</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Coordinate</span>:</span><br><span class="line">z = <span class="number">0</span></span><br><span class="line">point1 = Coordinate()  </span><br><span class="line"><span class="built_in">dir</span>(Coordinate)</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;__class__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__delattr__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__dict__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__dir__&#x27;</span>,</span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;z&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>isinstance(name,object)检查name是不是object对象</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span> (a,<span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>type(object) 查看对象的类型  <code>&gt;&gt;&gt; type(1) &lt;type &#39;int&#39;&gt;</code></p>
</li>
<li><p>callable(object)判断对象是否是可调用对象</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(add)             <span class="comment"># 函数返回 True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="args和-kwargs"><a href="#args和-kwargs" class="headerlink" title="*args和**kwargs"></a>*args和**kwargs</h3><p>*args可以被打包成tuple，**kwargs被打包成dict。<br>*args示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_multiple_args</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args), args)</span><br><span class="line"> </span><br><span class="line">print_multiple_args(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment"># 通过将列表前加*打包成关键字参数，指明了接收值参数必须是*args</span></span><br><span class="line">print_multiple_args(*[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt; (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt; (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>**kwargs示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_multiple_args</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(kwargs), kwargs)</span><br><span class="line"><span class="comment"># 给字典前加**打包成关键字参数,指明接收值的参数必须是**kwargs</span></span><br><span class="line">print_multiple_args(**&#123;<span class="string">&#x27;foo&#x27;</span>:<span class="string">&#x27;bar&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt; &#123;<span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异常代码示例"><a href="#异常代码示例" class="headerlink" title="异常代码示例"></a>异常代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># func   # 可能会抛出异常的代码</span></span><br><span class="line"><span class="keyword">except</span> (Exception1, Exception2) <span class="keyword">as</span> e:  <span class="comment"># 可以捕获多个异常并处理</span></span><br><span class="line">    <span class="comment"># 异常处理的代码</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># pass  # 异常没有发生的时候代码逻辑</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">pass</span>     <span class="comment"># 无论异常有没有发生都会执行的代码，一般处理资源的关闭和释放</span></span><br></pre></td></tr></table></figure>

<h3 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h3><p>GIL，解释器中一种线程同步的方式。</p>
<p>每个解释器都有一个GIL，直接作用是限制单个解释器进程中多线程的并行执行，使即使在多核处理器上对于单个解释器来说，同一时刻运行的线程仅限一个。同时造成的问题就是：在一个解释器进程中通过多线程的方式无法利用多核处理器来实现真正的并行。因此，Python的多线程是伪多线程，无法利用多核资源，同一时刻只能一个线程在真正的运行。</p>
<h3 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h3><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p><img src="https://img.econow.cn/medivh/1660724977831.png" alt="1660724977831.png"></p>
<p>迭代器是一种对象，该对象包含值的可计数数字，意味着可以遍历所有值。list、tuple、dict、set都是可迭代的对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mytuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">myit = <span class="built_in">iter</span>(mytuple)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myit))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myit))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myit))</span><br><span class="line"></span><br><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">cherry</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>要把对象或类创建为迭代器，必须为对象实现__iter__()和__next__（）方法。</p>
<h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>生成器，一遍循环一边计算的机制，不会像迭代器一样占用大量内存，只会在使用next()函数时才会生成下一个变量。</p>
<p>创建生成器：</p>
<ol>
<li>把列表的[]改为()</li>
<li>如果函数中包含yield关键字，那么调用函数时就会创建一个生成器对象</li>
</ol>
<p>工作原理：<strong>通过重复调用next()方法，直到捕获一个异常。</strong></p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addx</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"> </span><br><span class="line">c = addx(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))</span><br><span class="line"><span class="built_in">print</span>(c.__name__)</span><br><span class="line"><span class="built_in">print</span>(c(<span class="number">10</span>))</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;function&#x27;</span>&gt;</span><br><span class="line">adder</span><br></pre></td></tr></table></figure>

<h3 id="classmethod和staticmethod区别"><a href="#classmethod和staticmethod区别" class="headerlink" title="classmethod和staticmethod区别"></a>classmethod和staticmethod区别</h3><ul>
<li>都可以通过Class.method()的方式调用</li>
<li>classmethod第一个参数是cls，可以引用类变量</li>
<li>staticmethod使用起来和普通函数一样，只不过放在类里去组织，完全可以放在类之外</li>
<li>classmethod是为了使用类变量</li>
</ul>
<h3 id="new-和-init-的区别"><a href="#new-和-init-的区别" class="headerlink" title="__new__和__init__的区别"></a>__new__和__init__的区别</h3><h4 id="new"><a href="#new" class="headerlink" title="new"></a><strong>new</strong></h4><p>new方法是一个内置的静态方法，主要作用：</p>
<ol>
<li>在内存中为对象分配空间</li>
<li>返回对象的引用，将引用作为第一个参数传递给__init__方法</li>
</ol>
<blockquote>
<p>重写__new__方法的代码是固定的，只能  <code>return super().__new__(cls)</code> 。否则Python解释器到不到分配了空间的对象引用，就不会调用对象的初试方法</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MusicPlayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 如果不返回任何结果，</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;初始化音乐播放对象&quot;</span>)</span><br><span class="line"></span><br><span class="line">player = MusicPlayer()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(player)</span><br><span class="line"></span><br><span class="line">初始化音乐播放对象</span><br><span class="line">&lt;__main__.MusicPlayer <span class="built_in">object</span> at <span class="number">0x1108d38e0</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>new方法是静态方法，init方法是实例方法</li>
<li>new方法会返回一个床的实例，init方法什么都不返回</li>
<li>只有在new方法返回一个cls的实例后面的init方法才能被调用</li>
</ul>
<h4 id="call"><a href="#call" class="headerlink" title="call"></a><strong>call</strong></h4><p>call方法使类实例对象可以像调用普通函数那样，以”对象名()“的形式使用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CLanguage</span>:</span><br><span class="line">    <span class="comment"># 定义__call__方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self,name,add</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用__call__()方法&quot;</span>,name,add)</span><br><span class="line"></span><br><span class="line">clangs = CLanguage()</span><br><span class="line">clangs(<span class="string">&quot;foo&quot;</span>,<span class="string">&quot;bar&quot;</span>)</span><br><span class="line"></span><br><span class="line">调用__call__()方法 foo bar</span><br></pre></td></tr></table></figure>

<h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><p>深拷贝 <code>deepcopy()</code>是将一个对象拷贝到另一个对象中，意味着如果对一个对象的拷贝做出改变时，不会影响原对象。其本质是对象的一次序列化和一次返回序列化。<br>可能遇到的问题：</p>
<ol>
<li>一个对象如果直接或简介引用了自身，会导致无休止的递归拷贝。解决，可以通过memo字典来保存已经拷贝过的对象。</li>
<li>深拷贝可能对原本设计为多个对象共享的数据也进行拷贝。解决，通过pickle函数来定制指定类型对象的拷贝行为。</li>
</ol>
<p>浅拷贝 <code>copy()</code> 是将一个对象的引用拷贝到另一个对象上，如果在拷贝中改动，则会影响到原对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy </span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">a.append(<span class="number">6</span>)</span><br><span class="line">c = copy.copy(a)</span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>为了确保某一个类只有一个实例存在。</p>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p><strong>模块</strong>，Python模块是天然的单例模式。当模块在第一次导入时会生成<code>.pyc</code>文件，当第二次导入时就会直接加载<code>.pyc</code>文件。因此只需要把相关函数和数据定义在一个模块中，就可以获得一个单例对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class Mysingleton:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">singleton_obj=Mysingleton()</span><br><span class="line"><span class="comment"># 保存文件，需要使用时直接在其他文件导入次文件中的对象即可。</span></span><br><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> singleton_obj</span><br></pre></td></tr></table></figure>

<p><strong>new方法</strong>，实例化一个对象时，都是先执行类的new方法，实例化对象，然后再执行init方法，对这个对象初始化。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls,*args,**kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;new一个对象&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> cls.instance == <span class="literal">None</span>:</span><br><span class="line">            cls.instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">            <span class="keyword">return</span> cls.instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cls.instance</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;初始化对象&#x27;</span>)</span><br><span class="line">c1 = Test()</span><br><span class="line">c2 = Test()</span><br><span class="line">c3 = Test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(c3)</span><br><span class="line"></span><br><span class="line">new一个对象</span><br><span class="line">初始化对象</span><br><span class="line">new一个对象</span><br><span class="line">初始化对象</span><br><span class="line">new一个对象</span><br><span class="line">初始化对象</span><br><span class="line">&lt;__main__.Test <span class="built_in">object</span> at <span class="number">0x110ad12e0</span>&gt;</span><br><span class="line">&lt;__main__.Test <span class="built_in">object</span> at <span class="number">0x110ad12e0</span>&gt;</span><br><span class="line">&lt;__main__.Test <span class="built_in">object</span> at <span class="number">0x110ad12e0</span>&gt;</span><br></pre></td></tr></table></figure>

<p>结果可知实例化三个对象内存地址都是一样的，说明都是同一个对象。</p>
<p><strong>装饰器</strong>，任何一个类使用了该装饰器就会变成一个单例模式的类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">single_class</span>(<span class="params">cls</span>):</span><br><span class="line">    instance = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">single</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instance:</span><br><span class="line">            instance[cls] = cls(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> instance[cls]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> instance[cls]</span><br><span class="line">    <span class="keyword">return</span> single</span><br><span class="line"></span><br><span class="line"><span class="meta">@single_class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c1 = Test()</span><br><span class="line">c2 = Test()</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line">    </span><br><span class="line">&lt;__main__.Test <span class="built_in">object</span> at <span class="number">0x1109172b0</span>&gt;</span><br><span class="line">&lt;__main__.Test <span class="built_in">object</span> at <span class="number">0x1109172b0</span>&gt;</span><br><span class="line">​        </span><br></pre></td></tr></table></figure>

<p>装饰器将所有的对象都存储到字典里，如果之前创建过的对象就直接返回，否则就new一个。</p>
<p>单例模式的优点：</p>
<ol>
<li>节约内存，实例化N个对象都实际指向同一个内存地址</li>
<li>多个地方创建的实例可以属性直接使用</li>
</ol>
<h3 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h3><ul>
<li>CPython，从官网下载下的就是C语言开发的Python，所以叫CPython，使用最广</li>
<li>IPython，是基于CPython之上的一个交互式解释器</li>
<li>PyPy，采用JIT技术，对Python代码动态编译，但和CPython执行结果可能不同</li>
<li>Jython，运行在Java平台上的Python解释器</li>
<li>IronPython，运行在.net平台的Python</li>
</ul>
<h3 id="Python是如何实现内存管理的"><a href="#Python是如何实现内存管理的" class="headerlink" title="Python是如何实现内存管理的"></a>Python是如何实现内存管理的</h3><p>Python提供了自动化的内存管理，也就是说内存空间的分配与释放都是由Python解释器运行时自动进行的。内存管理有三个关键点：</p>
<ol>
<li>引用计数</li>
<li>标记清理</li>
<li>分代收集</li>
</ol>
<p>引用计数，每个对象其实就是PyObject结构体，内部有一个ob——refcnt的引用计数器成员变量。程序在执行过程中，该变量会随之更新并反应引用有多少个变量引用到该对象。当该对象引用计数值为0时，它的内存就会被释放掉。</p>
<p>以下情况会导致引用计数加1：</p>
<ol>
<li>对象被创建</li>
<li>对象被引用</li>
<li>对象作为参数传入到一个函数中</li>
<li>对象作为元素存储到一个容器中</li>
</ol>
<p>以下情况会导致引用计数减1：</p>
<ol>
<li>使用del</li>
<li>对象引用被重新赋值其他对象</li>
<li>一个对象离开它所在的作用域</li>
<li>持有该对象的容器自身被销毁</li>
<li>持有该对象的容器删除该对象</li>
</ol>
<h3 id="lambda-函数的使用"><a href="#lambda-函数的使用" class="headerlink" title="lambda 函数的使用"></a>lambda 函数的使用</h3><p>功能是利用一行代码实现的小型函数。比如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">lambda</span> a : a + <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(x(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<p>语法：<code>lambda arguments : expression</code></p>

    </div>

    
    
    

    <footer class="post-footer">
          <div class="reward-container">
  <div>请我一杯咖啡吧！</div>
  <button>
    赞赏
  </button>
  <div class="post-reward">
      <div>
        <img src="/images/wechatpay.png" alt="medivh 微信">
        <span>微信</span>
      </div>
      <div>
        <img src="/images/alipay.png" alt="medivh 支付宝">
        <span>支付宝</span>
      </div>

  </div>
</div>

          <div class="post-tags">
              <a href="/tags/Python/" rel="tag"><i class="fa fa-tag"></i> Python</a>
          </div>

        

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/Python%E4%B8%AD%E4%BD%BF%E7%94%A8list%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%93%8D%E4%BD%9C" rel="prev" title="Python中使用list的一些不常见的操作">
                  <i class="fa fa-angle-left"></i> Python中使用list的一些不常见的操作
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/Nginx%E7%9F%A5%E8%AF%86%E7%82%B9" rel="next" title="Nginx知识点">
                  Nginx知识点 <i class="fa fa-angle-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">

  <div class="beian"><a href="https://beian.miit.gov.cn/" rel="noopener" target="_blank">京ICP备17063827号-2 </a>
      <img src="https://beian.miit.gov.cn/#/Integrated/index" alt="">
  </div>
  <div class="copyright">
    &copy; 2017 – 
    <span itemprop="copyrightYear">2023</span>
    <span class="with-love">
      <i class="fa fa-heart"></i>
    </span>
    <span class="author" itemprop="copyrightHolder">medivh</span>
  </div>

    </div>
  </footer>

  
  <div class="back-to-top" role="button" aria-label="返回顶部">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
<script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/motion.js"></script><script src="/js/next-boot.js"></script>

  






  


  <script class="next-config" data-name="leancloud_visitors" type="application/json">{"enable":true,"app_id":"g1GwilqmVAUne2tDEDncEChG-gzGzoHsz","app_key":"YB2e5dSKMmMYYCtaSzxp9fdS","server_url":null,"security":true}</script>
  <script src="/js/third-party/statistics/lean-analytics.js"></script>



</body>
</html>
