<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: light)">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: dark)"><meta name="generator" content="Hexo 6.3.0">

  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="https://img.econow.cn/2018/1545104669394.png">
  <link rel="icon" type="image/png" sizes="16x16" href="https://img.econow.cn/2018/1545104669394.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha256-CTSx/A06dm1B063156EVh15m6Y67pAjZZaQc89LLSrU=" crossorigin="anonymous">

<script class="next-config" data-name="main" type="application/json">{"hostname":"econow.cn","root":"/","images":"/images","scheme":"Gemini","darkmode":true,"version":"8.18.2","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12},"copycode":{"enable":true,"style":null},"fold":{"enable":false,"height":500},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":false,"lazyload":true,"pangu":true,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"stickytabs":false,"motion":{"enable":false,"async":true,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜索...","empty":"没有找到任何搜索结果：${query}","hits_time":"找到 ${hits} 个搜索结果（用时 ${time} 毫秒）","hits":"找到 ${hits} 个搜索结果"},"path":"/search.xml","localsearch":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false}}</script><script src="/js/config.js"></script>

    <meta name="description" content="之前尝试过用scrapy抓取过一些网站，实在有点杀鸡焉用牛刀。现在用asyncio的方式再来一遍。  技术点">
<meta property="og:type" content="article">
<meta property="og:title" content="批量抓取免费小说">
<meta property="og:url" content="https://econow.cn/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E5%85%8D%E8%B4%B9%E5%B0%8F%E8%AF%B4">
<meta property="og:site_name" content="Medivh&#39;s castle">
<meta property="og:description" content="之前尝试过用scrapy抓取过一些网站，实在有点杀鸡焉用牛刀。现在用asyncio的方式再来一遍。  技术点">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://img.econow.cn/medivh/1664444705074.png">
<meta property="og:image" content="https://img.econow.cn/medivh/1664444768654.png">
<meta property="og:image" content="https://img.econow.cn/medivh/1664444937905.png">
<meta property="og:image" content="https://img.econow.cn/medivh/1664445213703.png">
<meta property="og:image" content="https://img.econow.cn/medivh/1664445432003.png">
<meta property="article:published_time" content="2022-09-29T09:36:12.000Z">
<meta property="article:modified_time" content="2023-10-31T02:15:08.715Z">
<meta property="article:author" content="medivh">
<meta property="article:tag" content="python">
<meta property="article:tag" content="爬虫">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://img.econow.cn/medivh/1664444705074.png">


<link rel="canonical" href="https://econow.cn/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E5%85%8D%E8%B4%B9%E5%B0%8F%E8%AF%B4">



<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"zh-CN","comments":true,"permalink":"https://econow.cn/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E5%85%8D%E8%B4%B9%E5%B0%8F%E8%AF%B4","path":"/批量抓取免费小说","title":"批量抓取免费小说"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>批量抓取免费小说 | Medivh's castle</title>
  

  <script src="/js/third-party/analytics/baidu-analytics.js"></script>
  <script async src="https://hm.baidu.com/hm.js?21ded952ca9fc25e2b0630494a17ec7f"></script>







  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">Medivh's castle</p>
      <i class="logo-line"></i>
    </a>
      <p class="site-subtitle" itemprop="description">数据蜘蛛工作室</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="搜索" role="button">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>关于</a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>标签</a></li><li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档</a></li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>搜索
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup"><div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input-container">
    <input autocomplete="off" autocapitalize="off" maxlength="80"
           placeholder="搜索..." spellcheck="false"
           type="search" class="search-input">
  </div>
  <span class="popup-btn-close" role="button">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="search-result-container no-result">
  <div class="search-result-icon">
    <i class="fa fa-spinner fa-pulse fa-5x"></i>
  </div>
</div>

    </div>
  </div>

</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%8A%80%E6%9C%AF%E7%82%B9"><span class="nav-number">1.</span> <span class="nav-text">技术点</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E9%80%BB%E8%BE%91"><span class="nav-number">2.</span> <span class="nav-text">逻辑</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%A4%BA%E4%BE%8B"><span class="nav-number">3.</span> <span class="nav-text">示例</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%80%BB%E7%BB%93"><span class="nav-number">4.</span> <span class="nav-text">总结</span></a></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">medivh</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">96</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
          <a href="/categories/">
        <span class="site-state-item-count">12</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
          <a href="/tags/">
        <span class="site-state-item-count">48</span>
        <span class="site-state-item-name">标签</span></a>
      </div>
  </nav>
</div>

        </div>
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="https://econow.cn/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E5%85%8D%E8%B4%B9%E5%B0%8F%E8%AF%B4">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="medivh">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Medivh's castle">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="批量抓取免费小说 | Medivh's castle">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          批量抓取免费小说
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">发表于</span>

      <time title="创建时间：2022-09-29 17:36:12" itemprop="dateCreated datePublished" datetime="2022-09-29T17:36:12+08:00">2022-09-29</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar-check"></i>
      </span>
      <span class="post-meta-item-text">更新于</span>
      <time title="修改时间：2023-10-31 10:15:08" itemprop="dateModified" datetime="2023-10-31T10:15:08+08:00">2023-10-31</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-folder"></i>
      </span>
      <span class="post-meta-item-text">分类于</span>
        <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
          <a href="/categories/%E4%B9%90%E8%B6%A3/" itemprop="url" rel="index"><span itemprop="name">乐趣</span></a>
        </span>
    </span>

  
    <span id="/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E5%85%8D%E8%B4%B9%E5%B0%8F%E8%AF%B4" class="post-meta-item leancloud_visitors" data-flag-title="批量抓取免费小说" title="阅读次数">
      <span class="post-meta-item-icon">
        <i class="far fa-eye"></i>
      </span>
      <span class="post-meta-item-text">阅读次数：</span>
      <span class="leancloud-visitors-count"></span>
    </span>
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody"><blockquote>
<p>之前尝试过用scrapy抓取过一些网站，实在有点杀鸡焉用牛刀。现在用asyncio的方式再来一遍。</p>
</blockquote>
<h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><p>任务使用到的技术点：</p>
<ul>
<li>asyncio</li>
<li>aiohttp</li>
<li>lxml</li>
<li>shutil</li>
</ul>
<p>所使用的技术点基本和之前的文章差不多，此处不再过多介绍。</p>
<h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>起初是想抓取一本小说，后来决定就选择整个专栏吧，其实技术难度也没增加多少。下面先从一本小说开始分析。</p>
<p>首先要获取章节目录的URL。<br><img data-src="https://img.econow.cn/medivh/1664444705074.png" alt="1664444705074.png"></p>
<p>根据源代码获取章节的URL<br><img data-src="https://img.econow.cn/medivh/1664444768654.png" alt="1664444768654.png"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_page_urls</span>(<span class="params">url, sem</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:  <span class="comment"># requests</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, headers=headers) <span class="keyword">as</span> resp:</span><br><span class="line">                html = etree.HTML(<span class="keyword">await</span> resp.content.read())</span><br><span class="line">                urls = []</span><br><span class="line">                title_of_book = html.xpath(<span class="string">&#x27;//div[@class=&quot;Main List&quot;]/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="built_in">print</span>(title_of_book)</span><br><span class="line">                td_html = html.xpath(<span class="string">&#x27;//div[@class=&quot;Main List&quot;]/dl[1]/dd[1]/a/@href&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> td_html:</span><br><span class="line">                    url = <span class="string">&#x27;https://www.17k.com&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">                    urls.append(url)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;共获取 &#123;&#125; 章节&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(urls)))</span><br><span class="line">                book_info = &#123;</span><br><span class="line">                    <span class="string">&#x27;title&#x27;</span>: title_of_book,</span><br><span class="line">                    <span class="string">&#x27;urls&#x27;</span>: urls</span><br><span class="line">                &#125;</span><br><span class="line">                all_book_list.append(book_info)</span><br></pre></td></tr></table></figure>

<p>代码中将书籍信息设置为dict()，方便之后调用。</p>
<p>然后根据章节URL进行下载小说内容。<br><img data-src="https://img.econow.cn/medivh/1664444937905.png" alt="1664444937905.png"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_target</span>(<span class="params">url, i, book_title, sem</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:  <span class="comment"># requests</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, headers=headers) <span class="keyword">as</span> resp:  <span class="comment"># requests.get()</span></span><br><span class="line">                html = etree.HTML(<span class="keyword">await</span> resp.content.read())</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    body_html = html.xpath(<span class="string">&#x27;//div[@class=&quot;readAreaBox content&quot;]&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;body获取失败&#x27;</span>, e, url)</span><br><span class="line">                title = body_html.xpath(<span class="string">&#x27;./h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">                    num = <span class="string">&#x27;000&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">                <span class="keyword">elif</span> i &lt; <span class="number">100</span>:</span><br><span class="line">                    num = <span class="string">&#x27;00&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">                <span class="keyword">elif</span> i &lt; <span class="number">1000</span>:</span><br><span class="line">                    num = <span class="string">&#x27;0&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">                file_name = <span class="string">&#x27;./novel/&#123;&#125;/&#123;&#125;.txt&#x27;</span>.<span class="built_in">format</span>(book_title, num)</span><br><span class="line">                content_html = body_html.xpath(<span class="string">&#x27;./div[@class=&quot;p&quot;]/p&#x27;</span>)</span><br><span class="line">                content = [i.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> content_html <span class="keyword">if</span> i.xpath(<span class="string">&#x27;./text()&#x27;</span>)]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    content.remove(content[-<span class="number">1</span>])</span><br><span class="line">                    <span class="comment"># 大部分情况是因为该章节被锁定，暂时无法查看，忽略即可</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(e, url)</span><br><span class="line">                content.insert(<span class="number">0</span>, title)</span><br><span class="line">                content.append(<span class="string">&#x27;该章节存在问题，已经被锁定，暂时无法查看&#x27;</span>) <span class="keyword">if</span> <span class="built_in">len</span>(content) == <span class="number">1</span> <span class="keyword">else</span> content.append(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(file_name, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">await</span> f.write(<span class="string">&quot;\n&quot;</span>.join(content))  <span class="comment"># 读写内容异步需要挂起</span></span><br></pre></td></tr></table></figure>

<p>下面的代码是为了合并文件排序的目的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    num = <span class="string">&#x27;000&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line"><span class="keyword">elif</span> i &lt; <span class="number">100</span>:</span><br><span class="line">    num = <span class="string">&#x27;00&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line"><span class="keyword">elif</span> i &lt; <span class="number">1000</span>:</span><br><span class="line">    num = <span class="string">&#x27;0&#x27;</span> + <span class="built_in">str</span>(i)</span><br></pre></td></tr></table></figure>

<p>经过以上步骤就可以实现抓取一本小说并保存为文件了。</p>
<p>下面聊一下抓取整个专栏的小说的流程。首先获取专栏的所有链接，并且可以从页面可以获取最大页数。</p>
<p><img data-src="https://img.econow.cn/medivh/1664445213703.png" alt="1664445213703.png"></p>
<p>然后从页面获取每一部书籍的章节入口的URL<br><img data-src="https://img.econow.cn/medivh/1664445432003.png" alt="1664445432003.png"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 获取所有书籍的URL</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">35</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://www.17k.com/all/book/3_0_0__3__1__&#123;&#125;.html&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    task = asyncio.create_task(get_book_url(url, sem))</span><br><span class="line">    tasks.append(task)</span><br><span class="line"><span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(all_book_url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_book_url</span>(<span class="params">url, sem</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:  <span class="comment"># requests</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, headers=headers) <span class="keyword">as</span> resp:  <span class="comment"># requests.get()</span></span><br><span class="line">                html = etree.HTML(<span class="keyword">await</span> resp.content.read())</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    table_html = html.xpath(<span class="string">&#x27;//tbody/tr[position()&gt;2]&#x27;</span>)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> table_html:</span><br><span class="line">                        url = i.xpath(<span class="string">&#x27;./td[3]/span/a/@href&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;list&#x27;</span>)  <span class="comment"># 处理为书籍的章节页面链接</span></span><br><span class="line">                        url = <span class="string">&#x27;https:&#x27;</span> + url</span><br><span class="line">                        all_book_url.append(url)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;body获取失败&#x27;</span>, e, url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取书籍的所有目录的URL</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_book_url:</span><br><span class="line">    task = asyncio.create_task(get_page_urls(i, sem))</span><br><span class="line">    tasks.append(task)</span><br><span class="line"><span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(all_book_list))</span><br></pre></td></tr></table></figure>

<p>到此为止，我们已经拿到了专栏里所有的书籍的章节URL，然后调用之前的内容下载函数就可以了。</p>
<p>此外还有一步需要处理，合并章节为一本小说。逻辑很简单，适用<code>os.listdir()</code>遍历每个目录下的章节，然后写入到新的文件里即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_file</span>(<span class="params">path</span>):</span><br><span class="line">    top_file_list = os.listdir(path)</span><br><span class="line">    <span class="built_in">print</span>(top_file_list)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> top_file_list:</span><br><span class="line">            file_list = os.listdir(path + <span class="string">&#x27;/&#x27;</span> + book)</span><br><span class="line">            file_list.sort()</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./book/&#123;&#125;.txt&#x27;</span>.<span class="built_in">format</span>(book), <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./novel/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(book) + file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file_f:</span><br><span class="line">                        f.write(file_f.read())</span><br><span class="line">            shutil.rmtree(path + <span class="string">&#x27;/&#x27;</span> + book)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@time:2022/09/29</span></span><br><span class="line"><span class="string">@file:17k.com.py</span></span><br><span class="line"><span class="string">@author:medivh</span></span><br><span class="line"><span class="string">@IDE:PyCharm </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> aiofiles</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> random_useragent</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: random_useragent(),</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_target</span>(<span class="params">url, i, book_title, sem</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:  <span class="comment"># requests</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, headers=headers) <span class="keyword">as</span> resp:  <span class="comment"># requests.get()</span></span><br><span class="line">                html = etree.HTML(<span class="keyword">await</span> resp.content.read())</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    body_html = html.xpath(<span class="string">&#x27;//div[@class=&quot;readAreaBox content&quot;]&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;body获取失败&#x27;</span>, e, url)</span><br><span class="line">                title = body_html.xpath(<span class="string">&#x27;./h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">                    num = <span class="string">&#x27;000&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">                <span class="keyword">elif</span> i &lt; <span class="number">100</span>:</span><br><span class="line">                    num = <span class="string">&#x27;00&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">                <span class="keyword">elif</span> i &lt; <span class="number">1000</span>:</span><br><span class="line">                    num = <span class="string">&#x27;0&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">                file_name = <span class="string">&#x27;./novel/&#123;&#125;/&#123;&#125;.txt&#x27;</span>.<span class="built_in">format</span>(book_title, num)</span><br><span class="line">                content_html = body_html.xpath(<span class="string">&#x27;./div[@class=&quot;p&quot;]/p&#x27;</span>)</span><br><span class="line">                content = [i.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> content_html <span class="keyword">if</span> i.xpath(<span class="string">&#x27;./text()&#x27;</span>)]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    content.remove(content[-<span class="number">1</span>])</span><br><span class="line">                    <span class="comment"># 大部分情况是因为该章节被锁定，暂时无法查看，忽略即可</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(e, url)</span><br><span class="line">                content.insert(<span class="number">0</span>, title)</span><br><span class="line">                content.append(<span class="string">&#x27;该章节存在问题，已经被锁定，暂时无法查看&#x27;</span>) <span class="keyword">if</span> <span class="built_in">len</span>(content) == <span class="number">1</span> <span class="keyword">else</span> content.append(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(file_name, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">await</span> f.write(<span class="string">&quot;\n&quot;</span>.join(content))  <span class="comment"># 读写内容异步需要挂起</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">all_book_list = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_page_urls</span>(<span class="params">url, sem</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:  <span class="comment"># requests</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, headers=headers) <span class="keyword">as</span> resp:</span><br><span class="line">                html = etree.HTML(<span class="keyword">await</span> resp.content.read())</span><br><span class="line">                urls = []</span><br><span class="line">                title_of_book = html.xpath(<span class="string">&#x27;//div[@class=&quot;Main List&quot;]/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="built_in">print</span>(title_of_book)</span><br><span class="line">                td_html = html.xpath(<span class="string">&#x27;//div[@class=&quot;Main List&quot;]/dl[1]/dd[1]/a/@href&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> td_html:</span><br><span class="line">                    url = <span class="string">&#x27;https://www.17k.com&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">                    urls.append(url)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;共获取 &#123;&#125; 章节&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(urls)))</span><br><span class="line">                book_info = &#123;</span><br><span class="line">                    <span class="string">&#x27;title&#x27;</span>: title_of_book,</span><br><span class="line">                    <span class="string">&#x27;urls&#x27;</span>: urls</span><br><span class="line">                &#125;</span><br><span class="line">                all_book_list.append(book_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">all_book_url = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_book_url</span>(<span class="params">url, sem</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:  <span class="comment"># requests</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, headers=headers) <span class="keyword">as</span> resp:  <span class="comment"># requests.get()</span></span><br><span class="line">                html = etree.HTML(<span class="keyword">await</span> resp.content.read())</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    table_html = html.xpath(<span class="string">&#x27;//tbody/tr[position()&gt;2]&#x27;</span>)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> table_html:</span><br><span class="line">                        url = i.xpath(<span class="string">&#x27;./td[3]/span/a/@href&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;list&#x27;</span>)  <span class="comment"># 处理为书籍的章节页面链接</span></span><br><span class="line">                        url = <span class="string">&#x27;https:&#x27;</span> + url</span><br><span class="line">                        all_book_url.append(url)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;body获取失败&#x27;</span>, e, url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks = []</span><br><span class="line">    sem = asyncio.Semaphore(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有书籍的URL</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">35</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://www.17k.com/all/book/3_0_0__3__1__&#123;&#125;.html&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        task = asyncio.create_task(get_book_url(url, sem))</span><br><span class="line">        tasks.append(task)</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(all_book_url))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取书籍的所有目录的URL</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> all_book_url:</span><br><span class="line">        task = asyncio.create_task(get_page_urls(i, sem))</span><br><span class="line">        tasks.append(task)</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(all_book_list))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> book <span class="keyword">in</span> all_book_list:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./novel/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(book[<span class="string">&#x27;title&#x27;</span>])):</span><br><span class="line">            os.mkdir(<span class="string">&#x27;./novel/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(book[<span class="string">&#x27;title&#x27;</span>]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;处理 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(book[<span class="string">&#x27;title&#x27;</span>]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(book[<span class="string">&#x27;urls&#x27;</span>])):</span><br><span class="line">            task = asyncio.create_task(download_target(book[<span class="string">&#x27;urls&#x27;</span>][i], i, book[<span class="string">&#x27;title&#x27;</span>], sem))</span><br><span class="line">            tasks.append(task)</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_file</span>(<span class="params">path</span>):</span><br><span class="line">    top_file_list = os.listdir(path)</span><br><span class="line">    <span class="built_in">print</span>(top_file_list)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> top_file_list:</span><br><span class="line">            file_list = os.listdir(path + <span class="string">&#x27;/&#x27;</span> + book)</span><br><span class="line">            file_list.sort()</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./book/&#123;&#125;.txt&#x27;</span>.<span class="built_in">format</span>(book), <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./novel/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(book) + file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file_f:</span><br><span class="line">                        f.write(file_f.read())</span><br><span class="line">            shutil.rmtree(path + <span class="string">&#x27;/&#x27;</span> + book)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    version 1.0:</span></span><br><span class="line"><span class="string">    1. 获取章节URL</span></span><br><span class="line"><span class="string">    2. 从URL获取章节内容</span></span><br><span class="line"><span class="string">    3. 存储</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    version 1.5:</span></span><br><span class="line"><span class="string">    1. 获取所有免费小说的URL</span></span><br><span class="line"><span class="string">    2. 从URL获取章节内容</span></span><br><span class="line"><span class="string">    3. 存储</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    start = <span class="built_in">int</span>(time.time())</span><br><span class="line">    <span class="built_in">print</span>(start)</span><br><span class="line">    asyncio.run(main())</span><br><span class="line"></span><br><span class="line">    merge_file(<span class="string">&#x27;./novel&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    end = <span class="built_in">int</span>(time.time())</span><br><span class="line">    <span class="built_in">print</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;抓取耗时：&#123;&#125;s&#x27;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此项任务中遇到了几次<code>nodename nor servname provided, or not known</code>的问题，可能是由于大量并发造成DNS解析出现的问题，适用gevent来解决。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br></pre></td></tr></table></figure>

    </div>

    
    
    

    <footer class="post-footer">
          <div class="reward-container">
  <div>喜欢就点个赞吧！</div>
  <button>
    赞赏
  </button>
  <div class="post-reward">
      <div>
        <img src="/images/wechatpay.jpg" alt="medivh 微信">
        <span>微信</span>
      </div>
      <div>
        <img src="/images/alipay.jpg" alt="medivh 支付宝">
        <span>支付宝</span>
      </div>

  </div>
</div>

          

<div class="post-copyright">
<ul>
  <li class="post-copyright-author">
      <strong>本文作者： </strong>medivh
  </li>
  <li class="post-copyright-link">
      <strong>本文链接：</strong>
      <a href="https://econow.cn/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E5%85%8D%E8%B4%B9%E5%B0%8F%E8%AF%B4" title="批量抓取免费小说">https://econow.cn/批量抓取免费小说</a>
  </li>
  <li class="post-copyright-license">
      <strong>版权声明： </strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="noopener" target="_blank"><i class="fab fa-fw fa-creative-commons"></i>BY-NC-SA</a> 许可协议。转载请注明出处！
  </li>
</ul>
</div>

          <div class="post-tags">
              <a href="/tags/python/" rel="tag"><i class="fa fa-tag"></i> python</a>
              <a href="/tags/%E7%88%AC%E8%99%AB/" rel="tag"><i class="fa fa-tag"></i> 爬虫</a>
          </div>

        

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E4%BC%98%E7%BE%8E%E5%9B%BE%E5%BA%93" rel="prev" title="批量抓取优美图库">
                  <i class="fa fa-angle-left"></i> 批量抓取优美图库
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E6%96%B0%E5%8F%91%E5%9C%B0%E8%8F%9C%E4%BB%B7" rel="next" title="批量抓取新发地菜价">
                  批量抓取新发地菜价 <i class="fa fa-angle-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">

  <div class="beian"><a href="https://beian.miit.gov.cn/" rel="noopener" target="_blank">京ICP备17063827号-2 </a>
  </div>
  <div class="copyright">
    &copy; 2017 – 
    <span itemprop="copyrightYear">2023</span>
    <span class="with-love">
      <i class="fa fa-heart"></i>
    </span>
    <span class="author" itemprop="copyrightHolder">medivh</span>
  </div>

    </div>
  </footer>

  
  <div class="back-to-top" role="button" aria-label="返回顶部">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>
  <div class="reading-progress-bar"></div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lozad.js/1.16.0/lozad.min.js" integrity="sha256-mOFREFhqmHeQbXpK2lp4nA3qooVgACfh88fpJftLBbc=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pangu/4.0.7/pangu.min.js" integrity="sha256-j+yj56cdEY2CwkVtGyz18fNybFGpMGJ8JxG3GSyO2+I=" crossorigin="anonymous"></script>
<script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/next-boot.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-generator-searchdb/1.4.1/search.js" integrity="sha256-1kfA5uHPf65M5cphT2dvymhkuyHPQp5A53EGZOnOLmc=" crossorigin="anonymous"></script>
<script src="/js/third-party/search/local-search.js"></script>







  


  <script class="next-config" data-name="leancloud_visitors" type="application/json">{"enable":true,"app_id":"g1GwilqmVAUne2tDEDncEChG-gzGzoHsz","app_key":"YB2e5dSKMmMYYCtaSzxp9fdS","server_url":"https://api.econow.cn","security":false}</script>
  <script src="/js/third-party/statistics/lean-analytics.js"></script>



</body>
</html>
