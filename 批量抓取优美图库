<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: light)">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: dark)"><meta name="generator" content="Hexo 6.3.0">

  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="https://img.econow.cn/2018/1545104669394.png">
  <link rel="icon" type="image/png" sizes="16x16" href="https://img.econow.cn/2018/1545104669394.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha256-CTSx/A06dm1B063156EVh15m6Y67pAjZZaQc89LLSrU=" crossorigin="anonymous">

<script class="next-config" data-name="main" type="application/json">{"hostname":"econow.cn","root":"/","images":"/images","scheme":"Gemini","darkmode":true,"version":"8.18.2","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12},"copycode":{"enable":true,"style":null},"fold":{"enable":false,"height":500},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":false,"lazyload":true,"pangu":true,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"stickytabs":false,"motion":{"enable":false,"async":true,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜索...","empty":"没有找到任何搜索结果：${query}","hits_time":"找到 ${hits} 个搜索结果（用时 ${time} 毫秒）","hits":"找到 ${hits} 个搜索结果"},"path":"/search.xml","localsearch":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false}}</script><script src="/js/config.js"></script>

    <meta name="description" content="以前尝试过一些多线程的方式进行爬虫，现在体验一下协程的方式。  技术点">
<meta property="og:type" content="article">
<meta property="og:title" content="批量抓取优美图库">
<meta property="og:url" content="https://econow.cn/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E4%BC%98%E7%BE%8E%E5%9B%BE%E5%BA%93">
<meta property="og:site_name" content="Medivh&#39;s castle">
<meta property="og:description" content="以前尝试过一些多线程的方式进行爬虫，现在体验一下协程的方式。  技术点">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://img.econow.cn/medivh/1664418664734.png">
<meta property="og:image" content="https://img.econow.cn/medivh/1664419499404.png">
<meta property="og:image" content="https://img.econow.cn/medivh/1664419554458.png">
<meta property="og:image" content="https://img.econow.cn/medivh/1664419837995.png">
<meta property="og:image" content="https://img.econow.cn/medivh/1664420426755.png">
<meta property="article:published_time" content="2022-09-29T02:28:47.000Z">
<meta property="article:modified_time" content="2023-10-31T02:15:08.714Z">
<meta property="article:author" content="medivh">
<meta property="article:tag" content="Python">
<meta property="article:tag" content="爬虫">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://img.econow.cn/medivh/1664418664734.png">


<link rel="canonical" href="https://econow.cn/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E4%BC%98%E7%BE%8E%E5%9B%BE%E5%BA%93">



<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"zh-CN","comments":true,"permalink":"https://econow.cn/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E4%BC%98%E7%BE%8E%E5%9B%BE%E5%BA%93","path":"/批量抓取优美图库","title":"批量抓取优美图库"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>批量抓取优美图库 | Medivh's castle</title>
  

  <script src="/js/third-party/analytics/baidu-analytics.js"></script>
  <script async src="https://hm.baidu.com/hm.js?21ded952ca9fc25e2b0630494a17ec7f"></script>







  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">Medivh's castle</p>
      <i class="logo-line"></i>
    </a>
      <p class="site-subtitle" itemprop="description">数据蜘蛛工作室</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="搜索" role="button">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>关于</a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>标签</a></li><li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档</a></li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>搜索
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup"><div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input-container">
    <input autocomplete="off" autocapitalize="off" maxlength="80"
           placeholder="搜索..." spellcheck="false"
           type="search" class="search-input">
  </div>
  <span class="popup-btn-close" role="button">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="search-result-container no-result">
  <div class="search-result-icon">
    <i class="fa fa-spinner fa-pulse fa-5x"></i>
  </div>
</div>

    </div>
  </div>

</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%8A%80%E6%9C%AF%E7%82%B9"><span class="nav-number">1.</span> <span class="nav-text">技术点</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%8D%8F%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5"><span class="nav-number">1.1.</span> <span class="nav-text">协程的概念</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%8D%8F%E7%A8%8B%E7%9A%84%E7%94%A8%E6%B3%95"><span class="nav-number">1.2.</span> <span class="nav-text">协程的用法</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#xpath"><span class="nav-number">1.3.</span> <span class="nav-text">xpath</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E9%80%89%E5%8F%96%E8%8A%82%E7%82%B9"><span class="nav-number">1.3.1.</span> <span class="nav-text">选取节点</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E9%80%BB%E8%BE%91"><span class="nav-number">2.</span> <span class="nav-text">逻辑</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E8%8E%B7%E5%8F%96%E4%B8%93%E6%A0%8F%E6%89%80%E6%9C%89%E9%A1%B5%E9%9D%A2%E9%93%BE%E6%8E%A5"><span class="nav-number">2.1.</span> <span class="nav-text">获取专栏所有页面链接</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E8%8E%B7%E5%8F%96%E6%AF%8F%E9%A1%B5%E4%B8%8A%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87%E6%89%80%E5%B1%9E%E9%A1%B5%E9%9D%A2%E7%9A%84%E9%93%BE%E6%8E%A5"><span class="nav-number">2.2.</span> <span class="nav-text">获取每页上所有图片所属页面的链接</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%BC%82%E6%AD%A5%E4%B8%8B%E8%BD%BD"><span class="nav-number">2.3.</span> <span class="nav-text">异步下载</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%95%B4%E4%BD%93%E4%BB%A3%E7%A0%81"><span class="nav-number">3.</span> <span class="nav-text">整体代码</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%80%BB%E7%BB%93"><span class="nav-number">4.</span> <span class="nav-text">总结</span></a></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">medivh</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">96</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
          <a href="/categories/">
        <span class="site-state-item-count">12</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
          <a href="/tags/">
        <span class="site-state-item-count">48</span>
        <span class="site-state-item-name">标签</span></a>
      </div>
  </nav>
</div>

        </div>
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="https://econow.cn/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E4%BC%98%E7%BE%8E%E5%9B%BE%E5%BA%93">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="medivh">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Medivh's castle">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="批量抓取优美图库 | Medivh's castle">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          批量抓取优美图库
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">发表于</span>

      <time title="创建时间：2022-09-29 10:28:47" itemprop="dateCreated datePublished" datetime="2022-09-29T10:28:47+08:00">2022-09-29</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar-check"></i>
      </span>
      <span class="post-meta-item-text">更新于</span>
      <time title="修改时间：2023-10-31 10:15:08" itemprop="dateModified" datetime="2023-10-31T10:15:08+08:00">2023-10-31</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-folder"></i>
      </span>
      <span class="post-meta-item-text">分类于</span>
        <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
          <a href="/categories/%E4%B9%90%E8%B6%A3/" itemprop="url" rel="index"><span itemprop="name">乐趣</span></a>
        </span>
    </span>

  
    <span id="/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E4%BC%98%E7%BE%8E%E5%9B%BE%E5%BA%93" class="post-meta-item leancloud_visitors" data-flag-title="批量抓取优美图库" title="阅读次数">
      <span class="post-meta-item-icon">
        <i class="far fa-eye"></i>
      </span>
      <span class="post-meta-item-text">阅读次数：</span>
      <span class="leancloud-visitors-count"></span>
    </span>
    <span class="post-meta-item" title="阅读次数" id="busuanzi_container_page_pv">
      <span class="post-meta-item-icon">
        <i class="far fa-eye"></i>
      </span>
      <span class="post-meta-item-text">阅读次数：</span>
      <span id="busuanzi_value_page_pv"></span>
    </span>
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody"><blockquote>
<p>以前尝试过一些多线程的方式进行爬虫，现在体验一下协程的方式。</p>
</blockquote>
<h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><h3 id="协程的概念"><a href="#协程的概念" class="headerlink" title="协程的概念"></a>协程的概念</h3><p>协程，Coroutine，又称微线程，是一种用户态的轻量级线程。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复之前保存的寄存器上下文和栈。因此协程能保留上一次调用时的状态，即局部状态的一个特定组合，每次过程重入时，就相当于进入上一次调用的状态。协程本质上是个单线程，相对于多进程来说，无需线程的上下文切换的开销，无需原子操作锁定及同步的开销。可以使用的场景，比如在网络爬虫的场景，发出一个请求之后，需要等待一定的实际才能得到响应。但是在等待过程中，程序可以做一些其他的事情，等到响应后再切回来继续处理，这样可以充分利用CPU和其他资源，也就是协程的优势所在。</p>
<p><img data-src="https://img.econow.cn/medivh/1664418664734.png" alt="1664418664734.png"></p>
<h3 id="协程的用法"><a href="#协程的用法" class="headerlink" title="协程的用法"></a>协程的用法</h3><p>协程相关的概念:</p>
<ul>
<li>event_loop 事件循环，相当于一个无限循环，可以把一些函数注册到这个事件循环上，当满足条件时，就会调用对应的处理方法。</li>
<li>coroutine 协程，在 Python 中常指代为协程对象类型，可以将协程对象注册到事件循环中，会被事件循环调用。使用 async 关键字来定义一个方法，在调用时不会立即被执行，而是先放回一个协程对象。</li>
<li>task 任务，是对协程对象的进一步封装，包含了任务的所有状态。<br>future 代表将来执行或没有执行任务的任务的结果，和task没有本质的区别。</li>
</ul>
<p>详细讲解参考 <a href="https://econow.cn/%E5%85%B3%E4%BA%8E%E5%8D%8F%E7%A8%8B%E7%9A%84%E8%AE%A4%E7%9F%A5.html">关于协程的认知</a></p>
<h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><p>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p>
<h4 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h4><p>XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td>选取此节点的所有子节点。</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>从根节点选取（取子节点）。</td>
</tr>
<tr>
<td>&#x2F;&#x2F;</td>
<td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置（取子孙节点）。</td>
</tr>
<tr>
<td>.</td>
<td>选取当前节点.</td>
</tr>
<tr>
<td>..</td>
<td>选取当前节点的父节点。</td>
</tr>
<tr>
<td>@</td>
<td>选取属性</td>
</tr>
</tbody></table>
<p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p>
<table>
<thead>
<tr>
<th>路径表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;bookstore&#x2F;book[1]</td>
<td>选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td>&#x2F;bookstore&#x2F;book[last()]</td>
<td>选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td>&#x2F;bookstore&#x2F;book[last()-1]</td>
<td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td>&#x2F;bookstore&#x2F;book[position()&lt;4]</td>
<td>选取最前面的3个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td>&#x2F;&#x2F;title[@lang]</td>
<td>选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td>&#x2F;&#x2F;title[@lang&#x3D;’eng’]</td>
<td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td>&#x2F;bookstore&#x2F;book[price&gt;35.00]</td>
<td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td>&#x2F;bookstore&#x2F;book[price&gt;35.00]&#x2F;&#x2F;title选取 bookstore 元素中的 book 元素的所有</td>
<td>title 元素，且其中的 price 元素的值须大于 35.00</td>
</tr>
</tbody></table>
<h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>首先需要先分析一下要爬取的目标是什么？当然是所有的图片。<br>那么图片是怎么展示的呢？通过各个专栏，每个专栏有N页，每页上N个链接，访问链接后就会展示目标图片的链接。</p>
<p>综上所述，流程如下：</p>
<ol>
<li>获取专栏所有页面链接</li>
<li>获取每页上所有图片所属页面的链接</li>
<li>根据图片的链接进行下载和存储</li>
</ol>
<h3 id="获取专栏所有页面链接"><a href="#获取专栏所有页面链接" class="headerlink" title="获取专栏所有页面链接"></a>获取专栏所有页面链接</h3><p><img data-src="https://img.econow.cn/medivh/1664419499404.png" alt="1664419499404.png"></p>
<p>本次示例目标是电脑壁纸专栏。</p>
<p>根据页面按钮获取第一页和最后一页的URL。其中第一页需要单独处理，之后的任意页都是递增的逻辑。而尾页直接提示767，直接使用即可，也可以复杂点使用xpath提取。<br><img data-src="https://img.econow.cn/medivh/1664419554458.png" alt="1664419554458.png"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">page_urls = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page_urls1</span>(<span class="params">page_num</span>):</span><br><span class="line">    <span class="keyword">if</span> page_num == <span class="number">1</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://www.umei.cc/bizhitupian/diannaobizhi&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://www.umei.cc/bizhitupian/diannaobizhi/index_&#123;&#125;.htm&#x27;</span>.<span class="built_in">format</span>(page_num)</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    html = etree.HTML(resp.text)</span><br><span class="line">    table = html.xpath(<span class="string">&#x27;//div[contains(@class,&quot;item masonry_brick&quot;)]&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> table:</span><br><span class="line">        url_list = table[<span class="number">0</span>].xpath(<span class="string">&#x27;//div[contains(@class,&quot;img&quot;)]/a/@href&#x27;</span>)</span><br><span class="line">        page_urls.extend(url_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page_urls</span>():</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">100</span>) <span class="keyword">as</span> t:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>): <span class="comment"># 此处的6为最大页面数，可以自行决定修改，最大值为767</span></span><br><span class="line">            args = [i]</span><br><span class="line">            t.submit(<span class="keyword">lambda</span> p: get_page_urls1(*p), args)</span><br></pre></td></tr></table></figure>

<p>最终获取到了所有页面的链接。</p>
<h3 id="获取每页上所有图片所属页面的链接"><a href="#获取每页上所有图片所属页面的链接" class="headerlink" title="获取每页上所有图片所属页面的链接"></a>获取每页上所有图片所属页面的链接</h3><p><img data-src="https://img.econow.cn/medivh/1664419837995.png" alt="1664419837995.png"><br>根据源代码获取了图片的链接。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">clean_urls = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pic_url1</span>(<span class="params">url</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://www.umei.cc&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url)</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    html = etree.HTML(resp.text)</span><br><span class="line">    pic_link = html.xpath(<span class="string">&#x27;//div[contains(@class,&quot;big-pic&quot;)]/a/img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    clean_urls.append(pic_link)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pic_url</span>():</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">100</span>) <span class="keyword">as</span> t:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> page_urls:</span><br><span class="line">            args = [i]</span><br><span class="line">            t.submit(<span class="keyword">lambda</span> p: get_pic_url1(*p), args)</span><br></pre></td></tr></table></figure>

<p>最终获取了所有图片的URL。</p>
<h3 id="异步下载"><a href="#异步下载" class="headerlink" title="异步下载"></a>异步下载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks = []</span><br><span class="line">    get_page_urls()</span><br><span class="line">    get_pic_url()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;即将下载的文件总数&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(clean_urls)))</span><br><span class="line">    sem = asyncio.Semaphore(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> clean_urls:</span><br><span class="line">        task = asyncio.create_task(download_pic(url, sem))</span><br><span class="line">        tasks.append(task)</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_pic</span>(<span class="params">url, sem</span>):</span><br><span class="line">    name = <span class="string">&#x27;../pic/&#x27;</span> + url.rsplit(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>]  <span class="comment"># 右切</span></span><br><span class="line">    timeout = aiohttp.ClientTimeout(total=<span class="number">300</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: random_useragent(),</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    conn = aiohttp.TCPConnector(limit=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(connector=conn, timeout=timeout) <span class="keyword">as</span> session:  <span class="comment"># requests</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, headers=headers) <span class="keyword">as</span> resp:  <span class="comment"># requests.get()</span></span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">await</span> f.write(<span class="keyword">await</span> resp.content.read())  <span class="comment"># 读取内容异步需要挂起</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;下载完成&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name))</span><br></pre></td></tr></table></figure>

<p>在处理这一步的时候遇到了一些问题，可能是并发太高，导致经常遇到链接断开或者超时的情况，因此使用了Semaphore来控制协程的并发。</p>
<h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@time:2022/09/28</span></span><br><span class="line"><span class="string">@file:aiohttp_umei.cc.py</span></span><br><span class="line"><span class="string">@author:medivh</span></span><br><span class="line"><span class="string">@IDE:PyCharm </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> aiofiles</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> random_useragent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_pic</span>(<span class="params">url, sem</span>):</span><br><span class="line">    name = <span class="string">&#x27;../pic/&#x27;</span> + url.rsplit(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>]  <span class="comment"># 右切</span></span><br><span class="line">    timeout = aiohttp.ClientTimeout(total=<span class="number">300</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: random_useragent(),</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    conn = aiohttp.TCPConnector(limit=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(connector=conn, timeout=timeout) <span class="keyword">as</span> session:  <span class="comment"># requests</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, headers=headers) <span class="keyword">as</span> resp:  <span class="comment"># requests.get()</span></span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">await</span> f.write(<span class="keyword">await</span> resp.content.read())  <span class="comment"># 读取内容异步需要挂起</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;下载完成&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page_url</span>():</span><br><span class="line">    urls = []</span><br><span class="line">    <span class="keyword">for</span> page_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> page_num == <span class="number">1</span>:</span><br><span class="line">            url = <span class="string">&#x27;https://www.umei.cc/bizhitupian/diannaobizhi&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            url = <span class="string">&#x27;https://www.umei.cc/bizhitupian/diannaobizhi/index_&#123;&#125;.htm&#x27;</span>.<span class="built_in">format</span>(page_num)</span><br><span class="line">        resp = requests.get(url)</span><br><span class="line">        html = etree.HTML(resp.text)</span><br><span class="line">        table = html.xpath(<span class="string">&#x27;//div[contains(@class,&quot;item masonry_brick&quot;)]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> table:</span><br><span class="line">            url_list = table[<span class="number">0</span>].xpath(<span class="string">&#x27;//div[contains(@class,&quot;img&quot;)]//@href&#x27;</span>)</span><br><span class="line">            urls.extend(url_list)</span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">page_urls = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page_urls1</span>(<span class="params">page_num</span>):</span><br><span class="line">    <span class="keyword">if</span> page_num == <span class="number">1</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://www.umei.cc/bizhitupian/diannaobizhi&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://www.umei.cc/bizhitupian/diannaobizhi/index_&#123;&#125;.htm&#x27;</span>.<span class="built_in">format</span>(page_num)</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    html = etree.HTML(resp.text)</span><br><span class="line">    table = html.xpath(<span class="string">&#x27;//div[contains(@class,&quot;item masonry_brick&quot;)]&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> table:</span><br><span class="line">        url_list = table[<span class="number">0</span>].xpath(<span class="string">&#x27;//div[contains(@class,&quot;img&quot;)]/a/@href&#x27;</span>)</span><br><span class="line">        page_urls.extend(url_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page_urls</span>():</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">100</span>) <span class="keyword">as</span> t:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">            args = [i]</span><br><span class="line">            t.submit(<span class="keyword">lambda</span> p: get_page_urls1(*p), args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clean_urls = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pic_url1</span>(<span class="params">url</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://www.umei.cc&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url)</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    html = etree.HTML(resp.text)</span><br><span class="line">    pic_link = html.xpath(<span class="string">&#x27;//div[contains(@class,&quot;big-pic&quot;)]/a/img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    clean_urls.append(pic_link)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pic_url</span>():</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">100</span>) <span class="keyword">as</span> t:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> page_urls:</span><br><span class="line">            args = [i]</span><br><span class="line">            t.submit(<span class="keyword">lambda</span> p: get_pic_url1(*p), args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks = []</span><br><span class="line">    get_page_urls()</span><br><span class="line">    get_pic_url()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;即将下载的文件总数&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(clean_urls)))</span><br><span class="line">    sem = asyncio.Semaphore(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> clean_urls:</span><br><span class="line">        task = asyncio.create_task(download_pic(url, sem))</span><br><span class="line">        tasks.append(task)</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1. 拼接URL 1-767</span></span><br><span class="line"><span class="string">    2. 从URL获取图片链接</span></span><br><span class="line"><span class="string">    3. 下载图片</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    start = <span class="built_in">int</span>(time.time())</span><br><span class="line">    <span class="built_in">print</span>(start)</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    end = <span class="built_in">int</span>(time.time())</span><br><span class="line">    <span class="built_in">print</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;抓取耗时：&#123;&#125;s&#x27;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>user-agent 可以自定义<br>Semaphore 数值可以根据实际情况来决定，比如带宽</p>
</blockquote>
<p>最终下载了5页图片，149张。<br><img data-src="https://img.econow.cn/medivh/1664420426755.png" alt="1664420426755.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>参考：</p>
<ul>
<li><a target="_blank" rel="noopener" href="https://www.51cto.com/article/675758.html">https://www.51cto.com/article/675758.html</a></li>
</ul>

    </div>

    
    
    

    <footer class="post-footer">
          <div class="reward-container">
  <div>喜欢就点个赞吧！</div>
  <button>
    赞赏
  </button>
  <div class="post-reward">
      <div>
        <img src="/images/wechatpay.jpg" alt="medivh 微信">
        <span>微信</span>
      </div>
      <div>
        <img src="/images/alipay.jpg" alt="medivh 支付宝">
        <span>支付宝</span>
      </div>

  </div>
</div>

          

<div class="post-copyright">
<ul>
  <li class="post-copyright-author">
      <strong>本文作者： </strong>medivh
  </li>
  <li class="post-copyright-link">
      <strong>本文链接：</strong>
      <a href="https://econow.cn/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E4%BC%98%E7%BE%8E%E5%9B%BE%E5%BA%93" title="批量抓取优美图库">https://econow.cn/批量抓取优美图库</a>
  </li>
  <li class="post-copyright-license">
      <strong>版权声明： </strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="noopener" target="_blank"><i class="fab fa-fw fa-creative-commons"></i>BY-NC-SA</a> 许可协议。转载请注明出处！
  </li>
</ul>
</div>

          <div class="post-tags">
              <a href="/tags/Python/" rel="tag"><i class="fa fa-tag"></i> Python</a>
              <a href="/tags/%E7%88%AC%E8%99%AB/" rel="tag"><i class="fa fa-tag"></i> 爬虫</a>
          </div>

        

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/%E8%A7%86%E9%A2%91%E6%8A%80%E6%9C%AF%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3" rel="prev" title="视频技术的简单理解">
                  <i class="fa fa-angle-left"></i> 视频技术的简单理解
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/%E6%89%B9%E9%87%8F%E6%8A%93%E5%8F%96%E5%85%8D%E8%B4%B9%E5%B0%8F%E8%AF%B4" rel="next" title="批量抓取免费小说">
                  批量抓取免费小说 <i class="fa fa-angle-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">

  <div class="beian"><a href="https://beian.miit.gov.cn/" rel="noopener" target="_blank">京ICP备17063827号-2 </a>
  </div>
  <div class="copyright">
    &copy; 2017 – 
    <span itemprop="copyrightYear">2023</span>
    <span class="with-love">
      <i class="fa fa-heart"></i>
    </span>
    <span class="author" itemprop="copyrightHolder">medivh</span>
  </div>
<div class="busuanzi-count">
    <span class="post-meta-item" id="busuanzi_container_site_uv">
      <span class="post-meta-item-icon">
        <i class="fa fa-user"></i>
      </span>
      <span class="site-uv" title="总访客量">
        <span id="busuanzi_value_site_uv"></span>
      </span>
    </span>
    <span class="post-meta-item" id="busuanzi_container_site_pv">
      <span class="post-meta-item-icon">
        <i class="fa fa-eye"></i>
      </span>
      <span class="site-pv" title="总访问量">
        <span id="busuanzi_value_site_pv"></span>
      </span>
    </span>
</div>

    </div>
  </footer>

  
  <div class="back-to-top" role="button" aria-label="返回顶部">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>
  <div class="reading-progress-bar"></div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lozad.js/1.16.0/lozad.min.js" integrity="sha256-mOFREFhqmHeQbXpK2lp4nA3qooVgACfh88fpJftLBbc=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pangu/4.0.7/pangu.min.js" integrity="sha256-j+yj56cdEY2CwkVtGyz18fNybFGpMGJ8JxG3GSyO2+I=" crossorigin="anonymous"></script>
<script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/next-boot.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-generator-searchdb/1.4.1/search.js" integrity="sha256-1kfA5uHPf65M5cphT2dvymhkuyHPQp5A53EGZOnOLmc=" crossorigin="anonymous"></script>
<script src="/js/third-party/search/local-search.js"></script>







  
  <script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>


  <script class="next-config" data-name="leancloud_visitors" type="application/json">{"enable":true,"app_id":"g1GwilqmVAUne2tDEDncEChG-gzGzoHsz","app_key":"YB2e5dSKMmMYYCtaSzxp9fdS","server_url":"https://api.econow.cn","security":true}</script>
  <script src="/js/third-party/statistics/lean-analytics.js"></script>



</body>
</html>
